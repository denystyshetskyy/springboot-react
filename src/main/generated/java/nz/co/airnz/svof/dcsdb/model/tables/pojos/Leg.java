/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.dcsdb.model.tables.pojos;


import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Leg implements Serializable {

    private static final long serialVersionUID = 1339546284;

    private String    flightIdComposite;
    private String    airlineCode;
    private String    flightNumber;
    private Date      flightOriginDate;
    private String    departAirportIata;
    private Integer   dcsFlightVersionNum;
    private Integer   legSeqNo;
    private String    actionCode;
    private String    actionStation;
    private String    agentCode;
    private String    dateStamp;
    private String    setAddress;
    private String    aircraftTypeFull;
    private String    aircraftConfigCode;
    private String    airportFrom;
    private String    timeStamp;
    private String    aircraftRegCountry;
    private String    aircraftVersion;
    private String    airportTo;
    private String    aircraftRegistration;
    private String    apiArrivalReqd;
    private String    aircraftType_3Char;
    private String    apiArrivalSent;
    private String    apiDepartureReqd;
    private String    apiDepartureSent;
    private String    apisSent;
    private String    appArrivalReqd;
    private String    appDepartureReqd;
    private String    aqqArrivalReqd;
    private String    aqqDepartureReqd;
    private String    aqqFlightCancelComplete;
    private String    aqqFlightCloseComplete;
    private String    autoDocCheckAdcActive;
    private String    autoRegradeIndicator;
    private String    baggageByPieceReqd;
    private String    baggageByWeightReqd;
    private String    baggageChuteNumOnBagTag;
    private String    baggageTransferMsgProdT;
    private String    baggageTransferMsgReqdT;
    private Integer   boardingStartTime;
    private String    cancelLandingAtADestn;
    private String    cbsaArrivalReqd;
    private String    cbsaDepartureReqd;
    private String    charterFlight;
    private String    checkInOptionIndicator;
    private String    choleraCertificateReqd;
    private String    codeshareFlightNumbers;
    private String    crewCode;
    private String    documentAirlineCode;
    private String    documentFlightNumber;
    private String    estimatedDepartureTime;
    private String    excessBagsRestricted;
    private String    fastTrackActive;
    private String    flightForDemoPurpose;
    private String    flightInDisruptStatus;
    private String    flightStatus;
    private Integer   flightType;
    private String    fomSent;
    private String    freqTravellerListProdF;
    private String    freqTravellerListReqdF;
    private String    ftlSent;
    private String    fullNameCheckinReqd;
    private Integer   fxEntryTimeStamp;
    private String    gateNumber;
    private String    handBaggageWeightReqd;
    private String    handbackMsgProdB;
    private String    handbackMsgReqdB;
    private String    hbSent;
    private String    idmSent;
    private String    idmSubloadProdI;
    private String    idmSubloadReqdI;
    private String    isCodeshare;
    private String    loadSignalProdL;
    private String    loadSignalReqdL;
    private String    maskCode;
    private String    matarikiTasmanFlight;
    private String    mrktngFlghtOnBpassFlag;
    private String    mrktngFlightOnBagtagFlag;
    private String    mvtSent;
    private Integer   operatingCabinCrewCount;
    private Integer   operatingTechCrewCount;
    private String    origAirlineCode;
    private Integer   origFlightLastVrsnNum;
    private String    origFlightNumber;
    private Date      origFlightOriginDate;
    private String    originatorTransitFlight;
    private String    pantryCode;
    private String    paxFirstNameReqd;
    private String    paxInitialsReqd;
    private String    paxManifestProdM;
    private String    paxManifestReqdM;
    private String    paxNamesTranfrd;
    private String    paxServiceMsgProdH;
    private String    paxServiceMsgReqdH;
    private String    pnlCodesharePaxCreated;
    private String    pnlExpectedThisFlight;
    private String    preventSeatChanges;
    private String    prlShootbackProd;
    private String    psmSent;
    private String    ptmPaxDisembarkingProdD;
    private String    ptmPaxDisembarkingReqdD;
    private String    replaceDestination;
    private Timestamp schdArrivalDate;
    private String    schdArrivalTime;
    private String    schdDepartureTime;
    private Timestamp schdLegDepartureDate;
    private String    seatPlanProdP;
    private String    seatPlanReqdP;
    private String    seats_2SuitFlight;
    private String    seatsOccupdSignalReqdO;
    private String    seatsOccupdSignlProdO;
    private String    secureFlightArrivalReqd;
    private String    secureFlightDepartureReqd;
    private String    secureFlightOverflyReqd;
    private String    skycouchFlight;
    private String    smallpoxCertificateReqd;
    private String    tailNumber;
    private String    throughCheckInIndicator;
    private String    ticketNumbersReqd;
    private String    tpInhibitedAtThisStation;
    private String    visaReqd;
    private String    yellowFeverCertReqd;
    private String    deadBagVerifctnStation;
    private String    boardngInhbtrActvThsStatn;
    private String    trafficRestrctnsInForce;

    public Leg() {}

    public Leg(Leg value) {
        this.flightIdComposite = value.flightIdComposite;
        this.airlineCode = value.airlineCode;
        this.flightNumber = value.flightNumber;
        this.flightOriginDate = value.flightOriginDate;
        this.departAirportIata = value.departAirportIata;
        this.dcsFlightVersionNum = value.dcsFlightVersionNum;
        this.legSeqNo = value.legSeqNo;
        this.actionCode = value.actionCode;
        this.actionStation = value.actionStation;
        this.agentCode = value.agentCode;
        this.dateStamp = value.dateStamp;
        this.setAddress = value.setAddress;
        this.aircraftTypeFull = value.aircraftTypeFull;
        this.aircraftConfigCode = value.aircraftConfigCode;
        this.airportFrom = value.airportFrom;
        this.timeStamp = value.timeStamp;
        this.aircraftRegCountry = value.aircraftRegCountry;
        this.aircraftVersion = value.aircraftVersion;
        this.airportTo = value.airportTo;
        this.aircraftRegistration = value.aircraftRegistration;
        this.apiArrivalReqd = value.apiArrivalReqd;
        this.aircraftType_3Char = value.aircraftType_3Char;
        this.apiArrivalSent = value.apiArrivalSent;
        this.apiDepartureReqd = value.apiDepartureReqd;
        this.apiDepartureSent = value.apiDepartureSent;
        this.apisSent = value.apisSent;
        this.appArrivalReqd = value.appArrivalReqd;
        this.appDepartureReqd = value.appDepartureReqd;
        this.aqqArrivalReqd = value.aqqArrivalReqd;
        this.aqqDepartureReqd = value.aqqDepartureReqd;
        this.aqqFlightCancelComplete = value.aqqFlightCancelComplete;
        this.aqqFlightCloseComplete = value.aqqFlightCloseComplete;
        this.autoDocCheckAdcActive = value.autoDocCheckAdcActive;
        this.autoRegradeIndicator = value.autoRegradeIndicator;
        this.baggageByPieceReqd = value.baggageByPieceReqd;
        this.baggageByWeightReqd = value.baggageByWeightReqd;
        this.baggageChuteNumOnBagTag = value.baggageChuteNumOnBagTag;
        this.baggageTransferMsgProdT = value.baggageTransferMsgProdT;
        this.baggageTransferMsgReqdT = value.baggageTransferMsgReqdT;
        this.boardingStartTime = value.boardingStartTime;
        this.cancelLandingAtADestn = value.cancelLandingAtADestn;
        this.cbsaArrivalReqd = value.cbsaArrivalReqd;
        this.cbsaDepartureReqd = value.cbsaDepartureReqd;
        this.charterFlight = value.charterFlight;
        this.checkInOptionIndicator = value.checkInOptionIndicator;
        this.choleraCertificateReqd = value.choleraCertificateReqd;
        this.codeshareFlightNumbers = value.codeshareFlightNumbers;
        this.crewCode = value.crewCode;
        this.documentAirlineCode = value.documentAirlineCode;
        this.documentFlightNumber = value.documentFlightNumber;
        this.estimatedDepartureTime = value.estimatedDepartureTime;
        this.excessBagsRestricted = value.excessBagsRestricted;
        this.fastTrackActive = value.fastTrackActive;
        this.flightForDemoPurpose = value.flightForDemoPurpose;
        this.flightInDisruptStatus = value.flightInDisruptStatus;
        this.flightStatus = value.flightStatus;
        this.flightType = value.flightType;
        this.fomSent = value.fomSent;
        this.freqTravellerListProdF = value.freqTravellerListProdF;
        this.freqTravellerListReqdF = value.freqTravellerListReqdF;
        this.ftlSent = value.ftlSent;
        this.fullNameCheckinReqd = value.fullNameCheckinReqd;
        this.fxEntryTimeStamp = value.fxEntryTimeStamp;
        this.gateNumber = value.gateNumber;
        this.handBaggageWeightReqd = value.handBaggageWeightReqd;
        this.handbackMsgProdB = value.handbackMsgProdB;
        this.handbackMsgReqdB = value.handbackMsgReqdB;
        this.hbSent = value.hbSent;
        this.idmSent = value.idmSent;
        this.idmSubloadProdI = value.idmSubloadProdI;
        this.idmSubloadReqdI = value.idmSubloadReqdI;
        this.isCodeshare = value.isCodeshare;
        this.loadSignalProdL = value.loadSignalProdL;
        this.loadSignalReqdL = value.loadSignalReqdL;
        this.maskCode = value.maskCode;
        this.matarikiTasmanFlight = value.matarikiTasmanFlight;
        this.mrktngFlghtOnBpassFlag = value.mrktngFlghtOnBpassFlag;
        this.mrktngFlightOnBagtagFlag = value.mrktngFlightOnBagtagFlag;
        this.mvtSent = value.mvtSent;
        this.operatingCabinCrewCount = value.operatingCabinCrewCount;
        this.operatingTechCrewCount = value.operatingTechCrewCount;
        this.origAirlineCode = value.origAirlineCode;
        this.origFlightLastVrsnNum = value.origFlightLastVrsnNum;
        this.origFlightNumber = value.origFlightNumber;
        this.origFlightOriginDate = value.origFlightOriginDate;
        this.originatorTransitFlight = value.originatorTransitFlight;
        this.pantryCode = value.pantryCode;
        this.paxFirstNameReqd = value.paxFirstNameReqd;
        this.paxInitialsReqd = value.paxInitialsReqd;
        this.paxManifestProdM = value.paxManifestProdM;
        this.paxManifestReqdM = value.paxManifestReqdM;
        this.paxNamesTranfrd = value.paxNamesTranfrd;
        this.paxServiceMsgProdH = value.paxServiceMsgProdH;
        this.paxServiceMsgReqdH = value.paxServiceMsgReqdH;
        this.pnlCodesharePaxCreated = value.pnlCodesharePaxCreated;
        this.pnlExpectedThisFlight = value.pnlExpectedThisFlight;
        this.preventSeatChanges = value.preventSeatChanges;
        this.prlShootbackProd = value.prlShootbackProd;
        this.psmSent = value.psmSent;
        this.ptmPaxDisembarkingProdD = value.ptmPaxDisembarkingProdD;
        this.ptmPaxDisembarkingReqdD = value.ptmPaxDisembarkingReqdD;
        this.replaceDestination = value.replaceDestination;
        this.schdArrivalDate = value.schdArrivalDate;
        this.schdArrivalTime = value.schdArrivalTime;
        this.schdDepartureTime = value.schdDepartureTime;
        this.schdLegDepartureDate = value.schdLegDepartureDate;
        this.seatPlanProdP = value.seatPlanProdP;
        this.seatPlanReqdP = value.seatPlanReqdP;
        this.seats_2SuitFlight = value.seats_2SuitFlight;
        this.seatsOccupdSignalReqdO = value.seatsOccupdSignalReqdO;
        this.seatsOccupdSignlProdO = value.seatsOccupdSignlProdO;
        this.secureFlightArrivalReqd = value.secureFlightArrivalReqd;
        this.secureFlightDepartureReqd = value.secureFlightDepartureReqd;
        this.secureFlightOverflyReqd = value.secureFlightOverflyReqd;
        this.skycouchFlight = value.skycouchFlight;
        this.smallpoxCertificateReqd = value.smallpoxCertificateReqd;
        this.tailNumber = value.tailNumber;
        this.throughCheckInIndicator = value.throughCheckInIndicator;
        this.ticketNumbersReqd = value.ticketNumbersReqd;
        this.tpInhibitedAtThisStation = value.tpInhibitedAtThisStation;
        this.visaReqd = value.visaReqd;
        this.yellowFeverCertReqd = value.yellowFeverCertReqd;
        this.deadBagVerifctnStation = value.deadBagVerifctnStation;
        this.boardngInhbtrActvThsStatn = value.boardngInhbtrActvThsStatn;
        this.trafficRestrctnsInForce = value.trafficRestrctnsInForce;
    }

    public Leg(
        String    flightIdComposite,
        String    airlineCode,
        String    flightNumber,
        Date      flightOriginDate,
        String    departAirportIata,
        Integer   dcsFlightVersionNum,
        Integer   legSeqNo,
        String    actionCode,
        String    actionStation,
        String    agentCode,
        String    dateStamp,
        String    setAddress,
        String    aircraftTypeFull,
        String    aircraftConfigCode,
        String    airportFrom,
        String    timeStamp,
        String    aircraftRegCountry,
        String    aircraftVersion,
        String    airportTo,
        String    aircraftRegistration,
        String    apiArrivalReqd,
        String    aircraftType_3Char,
        String    apiArrivalSent,
        String    apiDepartureReqd,
        String    apiDepartureSent,
        String    apisSent,
        String    appArrivalReqd,
        String    appDepartureReqd,
        String    aqqArrivalReqd,
        String    aqqDepartureReqd,
        String    aqqFlightCancelComplete,
        String    aqqFlightCloseComplete,
        String    autoDocCheckAdcActive,
        String    autoRegradeIndicator,
        String    baggageByPieceReqd,
        String    baggageByWeightReqd,
        String    baggageChuteNumOnBagTag,
        String    baggageTransferMsgProdT,
        String    baggageTransferMsgReqdT,
        Integer   boardingStartTime,
        String    cancelLandingAtADestn,
        String    cbsaArrivalReqd,
        String    cbsaDepartureReqd,
        String    charterFlight,
        String    checkInOptionIndicator,
        String    choleraCertificateReqd,
        String    codeshareFlightNumbers,
        String    crewCode,
        String    documentAirlineCode,
        String    documentFlightNumber,
        String    estimatedDepartureTime,
        String    excessBagsRestricted,
        String    fastTrackActive,
        String    flightForDemoPurpose,
        String    flightInDisruptStatus,
        String    flightStatus,
        Integer   flightType,
        String    fomSent,
        String    freqTravellerListProdF,
        String    freqTravellerListReqdF,
        String    ftlSent,
        String    fullNameCheckinReqd,
        Integer   fxEntryTimeStamp,
        String    gateNumber,
        String    handBaggageWeightReqd,
        String    handbackMsgProdB,
        String    handbackMsgReqdB,
        String    hbSent,
        String    idmSent,
        String    idmSubloadProdI,
        String    idmSubloadReqdI,
        String    isCodeshare,
        String    loadSignalProdL,
        String    loadSignalReqdL,
        String    maskCode,
        String    matarikiTasmanFlight,
        String    mrktngFlghtOnBpassFlag,
        String    mrktngFlightOnBagtagFlag,
        String    mvtSent,
        Integer   operatingCabinCrewCount,
        Integer   operatingTechCrewCount,
        String    origAirlineCode,
        Integer   origFlightLastVrsnNum,
        String    origFlightNumber,
        Date      origFlightOriginDate,
        String    originatorTransitFlight,
        String    pantryCode,
        String    paxFirstNameReqd,
        String    paxInitialsReqd,
        String    paxManifestProdM,
        String    paxManifestReqdM,
        String    paxNamesTranfrd,
        String    paxServiceMsgProdH,
        String    paxServiceMsgReqdH,
        String    pnlCodesharePaxCreated,
        String    pnlExpectedThisFlight,
        String    preventSeatChanges,
        String    prlShootbackProd,
        String    psmSent,
        String    ptmPaxDisembarkingProdD,
        String    ptmPaxDisembarkingReqdD,
        String    replaceDestination,
        Timestamp schdArrivalDate,
        String    schdArrivalTime,
        String    schdDepartureTime,
        Timestamp schdLegDepartureDate,
        String    seatPlanProdP,
        String    seatPlanReqdP,
        String    seats_2SuitFlight,
        String    seatsOccupdSignalReqdO,
        String    seatsOccupdSignlProdO,
        String    secureFlightArrivalReqd,
        String    secureFlightDepartureReqd,
        String    secureFlightOverflyReqd,
        String    skycouchFlight,
        String    smallpoxCertificateReqd,
        String    tailNumber,
        String    throughCheckInIndicator,
        String    ticketNumbersReqd,
        String    tpInhibitedAtThisStation,
        String    visaReqd,
        String    yellowFeverCertReqd,
        String    deadBagVerifctnStation,
        String    boardngInhbtrActvThsStatn,
        String    trafficRestrctnsInForce
    ) {
        this.flightIdComposite = flightIdComposite;
        this.airlineCode = airlineCode;
        this.flightNumber = flightNumber;
        this.flightOriginDate = flightOriginDate;
        this.departAirportIata = departAirportIata;
        this.dcsFlightVersionNum = dcsFlightVersionNum;
        this.legSeqNo = legSeqNo;
        this.actionCode = actionCode;
        this.actionStation = actionStation;
        this.agentCode = agentCode;
        this.dateStamp = dateStamp;
        this.setAddress = setAddress;
        this.aircraftTypeFull = aircraftTypeFull;
        this.aircraftConfigCode = aircraftConfigCode;
        this.airportFrom = airportFrom;
        this.timeStamp = timeStamp;
        this.aircraftRegCountry = aircraftRegCountry;
        this.aircraftVersion = aircraftVersion;
        this.airportTo = airportTo;
        this.aircraftRegistration = aircraftRegistration;
        this.apiArrivalReqd = apiArrivalReqd;
        this.aircraftType_3Char = aircraftType_3Char;
        this.apiArrivalSent = apiArrivalSent;
        this.apiDepartureReqd = apiDepartureReqd;
        this.apiDepartureSent = apiDepartureSent;
        this.apisSent = apisSent;
        this.appArrivalReqd = appArrivalReqd;
        this.appDepartureReqd = appDepartureReqd;
        this.aqqArrivalReqd = aqqArrivalReqd;
        this.aqqDepartureReqd = aqqDepartureReqd;
        this.aqqFlightCancelComplete = aqqFlightCancelComplete;
        this.aqqFlightCloseComplete = aqqFlightCloseComplete;
        this.autoDocCheckAdcActive = autoDocCheckAdcActive;
        this.autoRegradeIndicator = autoRegradeIndicator;
        this.baggageByPieceReqd = baggageByPieceReqd;
        this.baggageByWeightReqd = baggageByWeightReqd;
        this.baggageChuteNumOnBagTag = baggageChuteNumOnBagTag;
        this.baggageTransferMsgProdT = baggageTransferMsgProdT;
        this.baggageTransferMsgReqdT = baggageTransferMsgReqdT;
        this.boardingStartTime = boardingStartTime;
        this.cancelLandingAtADestn = cancelLandingAtADestn;
        this.cbsaArrivalReqd = cbsaArrivalReqd;
        this.cbsaDepartureReqd = cbsaDepartureReqd;
        this.charterFlight = charterFlight;
        this.checkInOptionIndicator = checkInOptionIndicator;
        this.choleraCertificateReqd = choleraCertificateReqd;
        this.codeshareFlightNumbers = codeshareFlightNumbers;
        this.crewCode = crewCode;
        this.documentAirlineCode = documentAirlineCode;
        this.documentFlightNumber = documentFlightNumber;
        this.estimatedDepartureTime = estimatedDepartureTime;
        this.excessBagsRestricted = excessBagsRestricted;
        this.fastTrackActive = fastTrackActive;
        this.flightForDemoPurpose = flightForDemoPurpose;
        this.flightInDisruptStatus = flightInDisruptStatus;
        this.flightStatus = flightStatus;
        this.flightType = flightType;
        this.fomSent = fomSent;
        this.freqTravellerListProdF = freqTravellerListProdF;
        this.freqTravellerListReqdF = freqTravellerListReqdF;
        this.ftlSent = ftlSent;
        this.fullNameCheckinReqd = fullNameCheckinReqd;
        this.fxEntryTimeStamp = fxEntryTimeStamp;
        this.gateNumber = gateNumber;
        this.handBaggageWeightReqd = handBaggageWeightReqd;
        this.handbackMsgProdB = handbackMsgProdB;
        this.handbackMsgReqdB = handbackMsgReqdB;
        this.hbSent = hbSent;
        this.idmSent = idmSent;
        this.idmSubloadProdI = idmSubloadProdI;
        this.idmSubloadReqdI = idmSubloadReqdI;
        this.isCodeshare = isCodeshare;
        this.loadSignalProdL = loadSignalProdL;
        this.loadSignalReqdL = loadSignalReqdL;
        this.maskCode = maskCode;
        this.matarikiTasmanFlight = matarikiTasmanFlight;
        this.mrktngFlghtOnBpassFlag = mrktngFlghtOnBpassFlag;
        this.mrktngFlightOnBagtagFlag = mrktngFlightOnBagtagFlag;
        this.mvtSent = mvtSent;
        this.operatingCabinCrewCount = operatingCabinCrewCount;
        this.operatingTechCrewCount = operatingTechCrewCount;
        this.origAirlineCode = origAirlineCode;
        this.origFlightLastVrsnNum = origFlightLastVrsnNum;
        this.origFlightNumber = origFlightNumber;
        this.origFlightOriginDate = origFlightOriginDate;
        this.originatorTransitFlight = originatorTransitFlight;
        this.pantryCode = pantryCode;
        this.paxFirstNameReqd = paxFirstNameReqd;
        this.paxInitialsReqd = paxInitialsReqd;
        this.paxManifestProdM = paxManifestProdM;
        this.paxManifestReqdM = paxManifestReqdM;
        this.paxNamesTranfrd = paxNamesTranfrd;
        this.paxServiceMsgProdH = paxServiceMsgProdH;
        this.paxServiceMsgReqdH = paxServiceMsgReqdH;
        this.pnlCodesharePaxCreated = pnlCodesharePaxCreated;
        this.pnlExpectedThisFlight = pnlExpectedThisFlight;
        this.preventSeatChanges = preventSeatChanges;
        this.prlShootbackProd = prlShootbackProd;
        this.psmSent = psmSent;
        this.ptmPaxDisembarkingProdD = ptmPaxDisembarkingProdD;
        this.ptmPaxDisembarkingReqdD = ptmPaxDisembarkingReqdD;
        this.replaceDestination = replaceDestination;
        this.schdArrivalDate = schdArrivalDate;
        this.schdArrivalTime = schdArrivalTime;
        this.schdDepartureTime = schdDepartureTime;
        this.schdLegDepartureDate = schdLegDepartureDate;
        this.seatPlanProdP = seatPlanProdP;
        this.seatPlanReqdP = seatPlanReqdP;
        this.seats_2SuitFlight = seats_2SuitFlight;
        this.seatsOccupdSignalReqdO = seatsOccupdSignalReqdO;
        this.seatsOccupdSignlProdO = seatsOccupdSignlProdO;
        this.secureFlightArrivalReqd = secureFlightArrivalReqd;
        this.secureFlightDepartureReqd = secureFlightDepartureReqd;
        this.secureFlightOverflyReqd = secureFlightOverflyReqd;
        this.skycouchFlight = skycouchFlight;
        this.smallpoxCertificateReqd = smallpoxCertificateReqd;
        this.tailNumber = tailNumber;
        this.throughCheckInIndicator = throughCheckInIndicator;
        this.ticketNumbersReqd = ticketNumbersReqd;
        this.tpInhibitedAtThisStation = tpInhibitedAtThisStation;
        this.visaReqd = visaReqd;
        this.yellowFeverCertReqd = yellowFeverCertReqd;
        this.deadBagVerifctnStation = deadBagVerifctnStation;
        this.boardngInhbtrActvThsStatn = boardngInhbtrActvThsStatn;
        this.trafficRestrctnsInForce = trafficRestrctnsInForce;
    }

    public String getFlightIdComposite() {
        return this.flightIdComposite;
    }

    public Leg setFlightIdComposite(String flightIdComposite) {
        this.flightIdComposite = flightIdComposite;
        return this;
    }

    public String getAirlineCode() {
        return this.airlineCode;
    }

    public Leg setAirlineCode(String airlineCode) {
        this.airlineCode = airlineCode;
        return this;
    }

    public String getFlightNumber() {
        return this.flightNumber;
    }

    public Leg setFlightNumber(String flightNumber) {
        this.flightNumber = flightNumber;
        return this;
    }

    public Date getFlightOriginDate() {
        return this.flightOriginDate;
    }

    public Leg setFlightOriginDate(Date flightOriginDate) {
        this.flightOriginDate = flightOriginDate;
        return this;
    }

    public String getDepartAirportIata() {
        return this.departAirportIata;
    }

    public Leg setDepartAirportIata(String departAirportIata) {
        this.departAirportIata = departAirportIata;
        return this;
    }

    public Integer getDcsFlightVersionNum() {
        return this.dcsFlightVersionNum;
    }

    public Leg setDcsFlightVersionNum(Integer dcsFlightVersionNum) {
        this.dcsFlightVersionNum = dcsFlightVersionNum;
        return this;
    }

    public Integer getLegSeqNo() {
        return this.legSeqNo;
    }

    public Leg setLegSeqNo(Integer legSeqNo) {
        this.legSeqNo = legSeqNo;
        return this;
    }

    public String getActionCode() {
        return this.actionCode;
    }

    public Leg setActionCode(String actionCode) {
        this.actionCode = actionCode;
        return this;
    }

    public String getActionStation() {
        return this.actionStation;
    }

    public Leg setActionStation(String actionStation) {
        this.actionStation = actionStation;
        return this;
    }

    public String getAgentCode() {
        return this.agentCode;
    }

    public Leg setAgentCode(String agentCode) {
        this.agentCode = agentCode;
        return this;
    }

    public String getDateStamp() {
        return this.dateStamp;
    }

    public Leg setDateStamp(String dateStamp) {
        this.dateStamp = dateStamp;
        return this;
    }

    public String getSetAddress() {
        return this.setAddress;
    }

    public Leg setSetAddress(String setAddress) {
        this.setAddress = setAddress;
        return this;
    }

    public String getAircraftTypeFull() {
        return this.aircraftTypeFull;
    }

    public Leg setAircraftTypeFull(String aircraftTypeFull) {
        this.aircraftTypeFull = aircraftTypeFull;
        return this;
    }

    public String getAircraftConfigCode() {
        return this.aircraftConfigCode;
    }

    public Leg setAircraftConfigCode(String aircraftConfigCode) {
        this.aircraftConfigCode = aircraftConfigCode;
        return this;
    }

    public String getAirportFrom() {
        return this.airportFrom;
    }

    public Leg setAirportFrom(String airportFrom) {
        this.airportFrom = airportFrom;
        return this;
    }

    public String getTimeStamp() {
        return this.timeStamp;
    }

    public Leg setTimeStamp(String timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }

    public String getAircraftRegCountry() {
        return this.aircraftRegCountry;
    }

    public Leg setAircraftRegCountry(String aircraftRegCountry) {
        this.aircraftRegCountry = aircraftRegCountry;
        return this;
    }

    public String getAircraftVersion() {
        return this.aircraftVersion;
    }

    public Leg setAircraftVersion(String aircraftVersion) {
        this.aircraftVersion = aircraftVersion;
        return this;
    }

    public String getAirportTo() {
        return this.airportTo;
    }

    public Leg setAirportTo(String airportTo) {
        this.airportTo = airportTo;
        return this;
    }

    public String getAircraftRegistration() {
        return this.aircraftRegistration;
    }

    public Leg setAircraftRegistration(String aircraftRegistration) {
        this.aircraftRegistration = aircraftRegistration;
        return this;
    }

    public String getApiArrivalReqd() {
        return this.apiArrivalReqd;
    }

    public Leg setApiArrivalReqd(String apiArrivalReqd) {
        this.apiArrivalReqd = apiArrivalReqd;
        return this;
    }

    public String getAircraftType_3Char() {
        return this.aircraftType_3Char;
    }

    public Leg setAircraftType_3Char(String aircraftType_3Char) {
        this.aircraftType_3Char = aircraftType_3Char;
        return this;
    }

    public String getApiArrivalSent() {
        return this.apiArrivalSent;
    }

    public Leg setApiArrivalSent(String apiArrivalSent) {
        this.apiArrivalSent = apiArrivalSent;
        return this;
    }

    public String getApiDepartureReqd() {
        return this.apiDepartureReqd;
    }

    public Leg setApiDepartureReqd(String apiDepartureReqd) {
        this.apiDepartureReqd = apiDepartureReqd;
        return this;
    }

    public String getApiDepartureSent() {
        return this.apiDepartureSent;
    }

    public Leg setApiDepartureSent(String apiDepartureSent) {
        this.apiDepartureSent = apiDepartureSent;
        return this;
    }

    public String getApisSent() {
        return this.apisSent;
    }

    public Leg setApisSent(String apisSent) {
        this.apisSent = apisSent;
        return this;
    }

    public String getAppArrivalReqd() {
        return this.appArrivalReqd;
    }

    public Leg setAppArrivalReqd(String appArrivalReqd) {
        this.appArrivalReqd = appArrivalReqd;
        return this;
    }

    public String getAppDepartureReqd() {
        return this.appDepartureReqd;
    }

    public Leg setAppDepartureReqd(String appDepartureReqd) {
        this.appDepartureReqd = appDepartureReqd;
        return this;
    }

    public String getAqqArrivalReqd() {
        return this.aqqArrivalReqd;
    }

    public Leg setAqqArrivalReqd(String aqqArrivalReqd) {
        this.aqqArrivalReqd = aqqArrivalReqd;
        return this;
    }

    public String getAqqDepartureReqd() {
        return this.aqqDepartureReqd;
    }

    public Leg setAqqDepartureReqd(String aqqDepartureReqd) {
        this.aqqDepartureReqd = aqqDepartureReqd;
        return this;
    }

    public String getAqqFlightCancelComplete() {
        return this.aqqFlightCancelComplete;
    }

    public Leg setAqqFlightCancelComplete(String aqqFlightCancelComplete) {
        this.aqqFlightCancelComplete = aqqFlightCancelComplete;
        return this;
    }

    public String getAqqFlightCloseComplete() {
        return this.aqqFlightCloseComplete;
    }

    public Leg setAqqFlightCloseComplete(String aqqFlightCloseComplete) {
        this.aqqFlightCloseComplete = aqqFlightCloseComplete;
        return this;
    }

    public String getAutoDocCheckAdcActive() {
        return this.autoDocCheckAdcActive;
    }

    public Leg setAutoDocCheckAdcActive(String autoDocCheckAdcActive) {
        this.autoDocCheckAdcActive = autoDocCheckAdcActive;
        return this;
    }

    public String getAutoRegradeIndicator() {
        return this.autoRegradeIndicator;
    }

    public Leg setAutoRegradeIndicator(String autoRegradeIndicator) {
        this.autoRegradeIndicator = autoRegradeIndicator;
        return this;
    }

    public String getBaggageByPieceReqd() {
        return this.baggageByPieceReqd;
    }

    public Leg setBaggageByPieceReqd(String baggageByPieceReqd) {
        this.baggageByPieceReqd = baggageByPieceReqd;
        return this;
    }

    public String getBaggageByWeightReqd() {
        return this.baggageByWeightReqd;
    }

    public Leg setBaggageByWeightReqd(String baggageByWeightReqd) {
        this.baggageByWeightReqd = baggageByWeightReqd;
        return this;
    }

    public String getBaggageChuteNumOnBagTag() {
        return this.baggageChuteNumOnBagTag;
    }

    public Leg setBaggageChuteNumOnBagTag(String baggageChuteNumOnBagTag) {
        this.baggageChuteNumOnBagTag = baggageChuteNumOnBagTag;
        return this;
    }

    public String getBaggageTransferMsgProdT() {
        return this.baggageTransferMsgProdT;
    }

    public Leg setBaggageTransferMsgProdT(String baggageTransferMsgProdT) {
        this.baggageTransferMsgProdT = baggageTransferMsgProdT;
        return this;
    }

    public String getBaggageTransferMsgReqdT() {
        return this.baggageTransferMsgReqdT;
    }

    public Leg setBaggageTransferMsgReqdT(String baggageTransferMsgReqdT) {
        this.baggageTransferMsgReqdT = baggageTransferMsgReqdT;
        return this;
    }

    public Integer getBoardingStartTime() {
        return this.boardingStartTime;
    }

    public Leg setBoardingStartTime(Integer boardingStartTime) {
        this.boardingStartTime = boardingStartTime;
        return this;
    }

    public String getCancelLandingAtADestn() {
        return this.cancelLandingAtADestn;
    }

    public Leg setCancelLandingAtADestn(String cancelLandingAtADestn) {
        this.cancelLandingAtADestn = cancelLandingAtADestn;
        return this;
    }

    public String getCbsaArrivalReqd() {
        return this.cbsaArrivalReqd;
    }

    public Leg setCbsaArrivalReqd(String cbsaArrivalReqd) {
        this.cbsaArrivalReqd = cbsaArrivalReqd;
        return this;
    }

    public String getCbsaDepartureReqd() {
        return this.cbsaDepartureReqd;
    }

    public Leg setCbsaDepartureReqd(String cbsaDepartureReqd) {
        this.cbsaDepartureReqd = cbsaDepartureReqd;
        return this;
    }

    public String getCharterFlight() {
        return this.charterFlight;
    }

    public Leg setCharterFlight(String charterFlight) {
        this.charterFlight = charterFlight;
        return this;
    }

    public String getCheckInOptionIndicator() {
        return this.checkInOptionIndicator;
    }

    public Leg setCheckInOptionIndicator(String checkInOptionIndicator) {
        this.checkInOptionIndicator = checkInOptionIndicator;
        return this;
    }

    public String getCholeraCertificateReqd() {
        return this.choleraCertificateReqd;
    }

    public Leg setCholeraCertificateReqd(String choleraCertificateReqd) {
        this.choleraCertificateReqd = choleraCertificateReqd;
        return this;
    }

    public String getCodeshareFlightNumbers() {
        return this.codeshareFlightNumbers;
    }

    public Leg setCodeshareFlightNumbers(String codeshareFlightNumbers) {
        this.codeshareFlightNumbers = codeshareFlightNumbers;
        return this;
    }

    public String getCrewCode() {
        return this.crewCode;
    }

    public Leg setCrewCode(String crewCode) {
        this.crewCode = crewCode;
        return this;
    }

    public String getDocumentAirlineCode() {
        return this.documentAirlineCode;
    }

    public Leg setDocumentAirlineCode(String documentAirlineCode) {
        this.documentAirlineCode = documentAirlineCode;
        return this;
    }

    public String getDocumentFlightNumber() {
        return this.documentFlightNumber;
    }

    public Leg setDocumentFlightNumber(String documentFlightNumber) {
        this.documentFlightNumber = documentFlightNumber;
        return this;
    }

    public String getEstimatedDepartureTime() {
        return this.estimatedDepartureTime;
    }

    public Leg setEstimatedDepartureTime(String estimatedDepartureTime) {
        this.estimatedDepartureTime = estimatedDepartureTime;
        return this;
    }

    public String getExcessBagsRestricted() {
        return this.excessBagsRestricted;
    }

    public Leg setExcessBagsRestricted(String excessBagsRestricted) {
        this.excessBagsRestricted = excessBagsRestricted;
        return this;
    }

    public String getFastTrackActive() {
        return this.fastTrackActive;
    }

    public Leg setFastTrackActive(String fastTrackActive) {
        this.fastTrackActive = fastTrackActive;
        return this;
    }

    public String getFlightForDemoPurpose() {
        return this.flightForDemoPurpose;
    }

    public Leg setFlightForDemoPurpose(String flightForDemoPurpose) {
        this.flightForDemoPurpose = flightForDemoPurpose;
        return this;
    }

    public String getFlightInDisruptStatus() {
        return this.flightInDisruptStatus;
    }

    public Leg setFlightInDisruptStatus(String flightInDisruptStatus) {
        this.flightInDisruptStatus = flightInDisruptStatus;
        return this;
    }

    public String getFlightStatus() {
        return this.flightStatus;
    }

    public Leg setFlightStatus(String flightStatus) {
        this.flightStatus = flightStatus;
        return this;
    }

    public Integer getFlightType() {
        return this.flightType;
    }

    public Leg setFlightType(Integer flightType) {
        this.flightType = flightType;
        return this;
    }

    public String getFomSent() {
        return this.fomSent;
    }

    public Leg setFomSent(String fomSent) {
        this.fomSent = fomSent;
        return this;
    }

    public String getFreqTravellerListProdF() {
        return this.freqTravellerListProdF;
    }

    public Leg setFreqTravellerListProdF(String freqTravellerListProdF) {
        this.freqTravellerListProdF = freqTravellerListProdF;
        return this;
    }

    public String getFreqTravellerListReqdF() {
        return this.freqTravellerListReqdF;
    }

    public Leg setFreqTravellerListReqdF(String freqTravellerListReqdF) {
        this.freqTravellerListReqdF = freqTravellerListReqdF;
        return this;
    }

    public String getFtlSent() {
        return this.ftlSent;
    }

    public Leg setFtlSent(String ftlSent) {
        this.ftlSent = ftlSent;
        return this;
    }

    public String getFullNameCheckinReqd() {
        return this.fullNameCheckinReqd;
    }

    public Leg setFullNameCheckinReqd(String fullNameCheckinReqd) {
        this.fullNameCheckinReqd = fullNameCheckinReqd;
        return this;
    }

    public Integer getFxEntryTimeStamp() {
        return this.fxEntryTimeStamp;
    }

    public Leg setFxEntryTimeStamp(Integer fxEntryTimeStamp) {
        this.fxEntryTimeStamp = fxEntryTimeStamp;
        return this;
    }

    public String getGateNumber() {
        return this.gateNumber;
    }

    public Leg setGateNumber(String gateNumber) {
        this.gateNumber = gateNumber;
        return this;
    }

    public String getHandBaggageWeightReqd() {
        return this.handBaggageWeightReqd;
    }

    public Leg setHandBaggageWeightReqd(String handBaggageWeightReqd) {
        this.handBaggageWeightReqd = handBaggageWeightReqd;
        return this;
    }

    public String getHandbackMsgProdB() {
        return this.handbackMsgProdB;
    }

    public Leg setHandbackMsgProdB(String handbackMsgProdB) {
        this.handbackMsgProdB = handbackMsgProdB;
        return this;
    }

    public String getHandbackMsgReqdB() {
        return this.handbackMsgReqdB;
    }

    public Leg setHandbackMsgReqdB(String handbackMsgReqdB) {
        this.handbackMsgReqdB = handbackMsgReqdB;
        return this;
    }

    public String getHbSent() {
        return this.hbSent;
    }

    public Leg setHbSent(String hbSent) {
        this.hbSent = hbSent;
        return this;
    }

    public String getIdmSent() {
        return this.idmSent;
    }

    public Leg setIdmSent(String idmSent) {
        this.idmSent = idmSent;
        return this;
    }

    public String getIdmSubloadProdI() {
        return this.idmSubloadProdI;
    }

    public Leg setIdmSubloadProdI(String idmSubloadProdI) {
        this.idmSubloadProdI = idmSubloadProdI;
        return this;
    }

    public String getIdmSubloadReqdI() {
        return this.idmSubloadReqdI;
    }

    public Leg setIdmSubloadReqdI(String idmSubloadReqdI) {
        this.idmSubloadReqdI = idmSubloadReqdI;
        return this;
    }

    public String getIsCodeshare() {
        return this.isCodeshare;
    }

    public Leg setIsCodeshare(String isCodeshare) {
        this.isCodeshare = isCodeshare;
        return this;
    }

    public String getLoadSignalProdL() {
        return this.loadSignalProdL;
    }

    public Leg setLoadSignalProdL(String loadSignalProdL) {
        this.loadSignalProdL = loadSignalProdL;
        return this;
    }

    public String getLoadSignalReqdL() {
        return this.loadSignalReqdL;
    }

    public Leg setLoadSignalReqdL(String loadSignalReqdL) {
        this.loadSignalReqdL = loadSignalReqdL;
        return this;
    }

    public String getMaskCode() {
        return this.maskCode;
    }

    public Leg setMaskCode(String maskCode) {
        this.maskCode = maskCode;
        return this;
    }

    public String getMatarikiTasmanFlight() {
        return this.matarikiTasmanFlight;
    }

    public Leg setMatarikiTasmanFlight(String matarikiTasmanFlight) {
        this.matarikiTasmanFlight = matarikiTasmanFlight;
        return this;
    }

    public String getMrktngFlghtOnBpassFlag() {
        return this.mrktngFlghtOnBpassFlag;
    }

    public Leg setMrktngFlghtOnBpassFlag(String mrktngFlghtOnBpassFlag) {
        this.mrktngFlghtOnBpassFlag = mrktngFlghtOnBpassFlag;
        return this;
    }

    public String getMrktngFlightOnBagtagFlag() {
        return this.mrktngFlightOnBagtagFlag;
    }

    public Leg setMrktngFlightOnBagtagFlag(String mrktngFlightOnBagtagFlag) {
        this.mrktngFlightOnBagtagFlag = mrktngFlightOnBagtagFlag;
        return this;
    }

    public String getMvtSent() {
        return this.mvtSent;
    }

    public Leg setMvtSent(String mvtSent) {
        this.mvtSent = mvtSent;
        return this;
    }

    public Integer getOperatingCabinCrewCount() {
        return this.operatingCabinCrewCount;
    }

    public Leg setOperatingCabinCrewCount(Integer operatingCabinCrewCount) {
        this.operatingCabinCrewCount = operatingCabinCrewCount;
        return this;
    }

    public Integer getOperatingTechCrewCount() {
        return this.operatingTechCrewCount;
    }

    public Leg setOperatingTechCrewCount(Integer operatingTechCrewCount) {
        this.operatingTechCrewCount = operatingTechCrewCount;
        return this;
    }

    public String getOrigAirlineCode() {
        return this.origAirlineCode;
    }

    public Leg setOrigAirlineCode(String origAirlineCode) {
        this.origAirlineCode = origAirlineCode;
        return this;
    }

    public Integer getOrigFlightLastVrsnNum() {
        return this.origFlightLastVrsnNum;
    }

    public Leg setOrigFlightLastVrsnNum(Integer origFlightLastVrsnNum) {
        this.origFlightLastVrsnNum = origFlightLastVrsnNum;
        return this;
    }

    public String getOrigFlightNumber() {
        return this.origFlightNumber;
    }

    public Leg setOrigFlightNumber(String origFlightNumber) {
        this.origFlightNumber = origFlightNumber;
        return this;
    }

    public Date getOrigFlightOriginDate() {
        return this.origFlightOriginDate;
    }

    public Leg setOrigFlightOriginDate(Date origFlightOriginDate) {
        this.origFlightOriginDate = origFlightOriginDate;
        return this;
    }

    public String getOriginatorTransitFlight() {
        return this.originatorTransitFlight;
    }

    public Leg setOriginatorTransitFlight(String originatorTransitFlight) {
        this.originatorTransitFlight = originatorTransitFlight;
        return this;
    }

    public String getPantryCode() {
        return this.pantryCode;
    }

    public Leg setPantryCode(String pantryCode) {
        this.pantryCode = pantryCode;
        return this;
    }

    public String getPaxFirstNameReqd() {
        return this.paxFirstNameReqd;
    }

    public Leg setPaxFirstNameReqd(String paxFirstNameReqd) {
        this.paxFirstNameReqd = paxFirstNameReqd;
        return this;
    }

    public String getPaxInitialsReqd() {
        return this.paxInitialsReqd;
    }

    public Leg setPaxInitialsReqd(String paxInitialsReqd) {
        this.paxInitialsReqd = paxInitialsReqd;
        return this;
    }

    public String getPaxManifestProdM() {
        return this.paxManifestProdM;
    }

    public Leg setPaxManifestProdM(String paxManifestProdM) {
        this.paxManifestProdM = paxManifestProdM;
        return this;
    }

    public String getPaxManifestReqdM() {
        return this.paxManifestReqdM;
    }

    public Leg setPaxManifestReqdM(String paxManifestReqdM) {
        this.paxManifestReqdM = paxManifestReqdM;
        return this;
    }

    public String getPaxNamesTranfrd() {
        return this.paxNamesTranfrd;
    }

    public Leg setPaxNamesTranfrd(String paxNamesTranfrd) {
        this.paxNamesTranfrd = paxNamesTranfrd;
        return this;
    }

    public String getPaxServiceMsgProdH() {
        return this.paxServiceMsgProdH;
    }

    public Leg setPaxServiceMsgProdH(String paxServiceMsgProdH) {
        this.paxServiceMsgProdH = paxServiceMsgProdH;
        return this;
    }

    public String getPaxServiceMsgReqdH() {
        return this.paxServiceMsgReqdH;
    }

    public Leg setPaxServiceMsgReqdH(String paxServiceMsgReqdH) {
        this.paxServiceMsgReqdH = paxServiceMsgReqdH;
        return this;
    }

    public String getPnlCodesharePaxCreated() {
        return this.pnlCodesharePaxCreated;
    }

    public Leg setPnlCodesharePaxCreated(String pnlCodesharePaxCreated) {
        this.pnlCodesharePaxCreated = pnlCodesharePaxCreated;
        return this;
    }

    public String getPnlExpectedThisFlight() {
        return this.pnlExpectedThisFlight;
    }

    public Leg setPnlExpectedThisFlight(String pnlExpectedThisFlight) {
        this.pnlExpectedThisFlight = pnlExpectedThisFlight;
        return this;
    }

    public String getPreventSeatChanges() {
        return this.preventSeatChanges;
    }

    public Leg setPreventSeatChanges(String preventSeatChanges) {
        this.preventSeatChanges = preventSeatChanges;
        return this;
    }

    public String getPrlShootbackProd() {
        return this.prlShootbackProd;
    }

    public Leg setPrlShootbackProd(String prlShootbackProd) {
        this.prlShootbackProd = prlShootbackProd;
        return this;
    }

    public String getPsmSent() {
        return this.psmSent;
    }

    public Leg setPsmSent(String psmSent) {
        this.psmSent = psmSent;
        return this;
    }

    public String getPtmPaxDisembarkingProdD() {
        return this.ptmPaxDisembarkingProdD;
    }

    public Leg setPtmPaxDisembarkingProdD(String ptmPaxDisembarkingProdD) {
        this.ptmPaxDisembarkingProdD = ptmPaxDisembarkingProdD;
        return this;
    }

    public String getPtmPaxDisembarkingReqdD() {
        return this.ptmPaxDisembarkingReqdD;
    }

    public Leg setPtmPaxDisembarkingReqdD(String ptmPaxDisembarkingReqdD) {
        this.ptmPaxDisembarkingReqdD = ptmPaxDisembarkingReqdD;
        return this;
    }

    public String getReplaceDestination() {
        return this.replaceDestination;
    }

    public Leg setReplaceDestination(String replaceDestination) {
        this.replaceDestination = replaceDestination;
        return this;
    }

    public Timestamp getSchdArrivalDate() {
        return this.schdArrivalDate;
    }

    public Leg setSchdArrivalDate(Timestamp schdArrivalDate) {
        this.schdArrivalDate = schdArrivalDate;
        return this;
    }

    public String getSchdArrivalTime() {
        return this.schdArrivalTime;
    }

    public Leg setSchdArrivalTime(String schdArrivalTime) {
        this.schdArrivalTime = schdArrivalTime;
        return this;
    }

    public String getSchdDepartureTime() {
        return this.schdDepartureTime;
    }

    public Leg setSchdDepartureTime(String schdDepartureTime) {
        this.schdDepartureTime = schdDepartureTime;
        return this;
    }

    public Timestamp getSchdLegDepartureDate() {
        return this.schdLegDepartureDate;
    }

    public Leg setSchdLegDepartureDate(Timestamp schdLegDepartureDate) {
        this.schdLegDepartureDate = schdLegDepartureDate;
        return this;
    }

    public String getSeatPlanProdP() {
        return this.seatPlanProdP;
    }

    public Leg setSeatPlanProdP(String seatPlanProdP) {
        this.seatPlanProdP = seatPlanProdP;
        return this;
    }

    public String getSeatPlanReqdP() {
        return this.seatPlanReqdP;
    }

    public Leg setSeatPlanReqdP(String seatPlanReqdP) {
        this.seatPlanReqdP = seatPlanReqdP;
        return this;
    }

    public String getSeats_2SuitFlight() {
        return this.seats_2SuitFlight;
    }

    public Leg setSeats_2SuitFlight(String seats_2SuitFlight) {
        this.seats_2SuitFlight = seats_2SuitFlight;
        return this;
    }

    public String getSeatsOccupdSignalReqdO() {
        return this.seatsOccupdSignalReqdO;
    }

    public Leg setSeatsOccupdSignalReqdO(String seatsOccupdSignalReqdO) {
        this.seatsOccupdSignalReqdO = seatsOccupdSignalReqdO;
        return this;
    }

    public String getSeatsOccupdSignlProdO() {
        return this.seatsOccupdSignlProdO;
    }

    public Leg setSeatsOccupdSignlProdO(String seatsOccupdSignlProdO) {
        this.seatsOccupdSignlProdO = seatsOccupdSignlProdO;
        return this;
    }

    public String getSecureFlightArrivalReqd() {
        return this.secureFlightArrivalReqd;
    }

    public Leg setSecureFlightArrivalReqd(String secureFlightArrivalReqd) {
        this.secureFlightArrivalReqd = secureFlightArrivalReqd;
        return this;
    }

    public String getSecureFlightDepartureReqd() {
        return this.secureFlightDepartureReqd;
    }

    public Leg setSecureFlightDepartureReqd(String secureFlightDepartureReqd) {
        this.secureFlightDepartureReqd = secureFlightDepartureReqd;
        return this;
    }

    public String getSecureFlightOverflyReqd() {
        return this.secureFlightOverflyReqd;
    }

    public Leg setSecureFlightOverflyReqd(String secureFlightOverflyReqd) {
        this.secureFlightOverflyReqd = secureFlightOverflyReqd;
        return this;
    }

    public String getSkycouchFlight() {
        return this.skycouchFlight;
    }

    public Leg setSkycouchFlight(String skycouchFlight) {
        this.skycouchFlight = skycouchFlight;
        return this;
    }

    public String getSmallpoxCertificateReqd() {
        return this.smallpoxCertificateReqd;
    }

    public Leg setSmallpoxCertificateReqd(String smallpoxCertificateReqd) {
        this.smallpoxCertificateReqd = smallpoxCertificateReqd;
        return this;
    }

    public String getTailNumber() {
        return this.tailNumber;
    }

    public Leg setTailNumber(String tailNumber) {
        this.tailNumber = tailNumber;
        return this;
    }

    public String getThroughCheckInIndicator() {
        return this.throughCheckInIndicator;
    }

    public Leg setThroughCheckInIndicator(String throughCheckInIndicator) {
        this.throughCheckInIndicator = throughCheckInIndicator;
        return this;
    }

    public String getTicketNumbersReqd() {
        return this.ticketNumbersReqd;
    }

    public Leg setTicketNumbersReqd(String ticketNumbersReqd) {
        this.ticketNumbersReqd = ticketNumbersReqd;
        return this;
    }

    public String getTpInhibitedAtThisStation() {
        return this.tpInhibitedAtThisStation;
    }

    public Leg setTpInhibitedAtThisStation(String tpInhibitedAtThisStation) {
        this.tpInhibitedAtThisStation = tpInhibitedAtThisStation;
        return this;
    }

    public String getVisaReqd() {
        return this.visaReqd;
    }

    public Leg setVisaReqd(String visaReqd) {
        this.visaReqd = visaReqd;
        return this;
    }

    public String getYellowFeverCertReqd() {
        return this.yellowFeverCertReqd;
    }

    public Leg setYellowFeverCertReqd(String yellowFeverCertReqd) {
        this.yellowFeverCertReqd = yellowFeverCertReqd;
        return this;
    }

    public String getDeadBagVerifctnStation() {
        return this.deadBagVerifctnStation;
    }

    public Leg setDeadBagVerifctnStation(String deadBagVerifctnStation) {
        this.deadBagVerifctnStation = deadBagVerifctnStation;
        return this;
    }

    public String getBoardngInhbtrActvThsStatn() {
        return this.boardngInhbtrActvThsStatn;
    }

    public Leg setBoardngInhbtrActvThsStatn(String boardngInhbtrActvThsStatn) {
        this.boardngInhbtrActvThsStatn = boardngInhbtrActvThsStatn;
        return this;
    }

    public String getTrafficRestrctnsInForce() {
        return this.trafficRestrctnsInForce;
    }

    public Leg setTrafficRestrctnsInForce(String trafficRestrctnsInForce) {
        this.trafficRestrctnsInForce = trafficRestrctnsInForce;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Leg other = (Leg) obj;
        if (flightIdComposite == null) {
            if (other.flightIdComposite != null)
                return false;
        }
        else if (!flightIdComposite.equals(other.flightIdComposite))
            return false;
        if (airlineCode == null) {
            if (other.airlineCode != null)
                return false;
        }
        else if (!airlineCode.equals(other.airlineCode))
            return false;
        if (flightNumber == null) {
            if (other.flightNumber != null)
                return false;
        }
        else if (!flightNumber.equals(other.flightNumber))
            return false;
        if (flightOriginDate == null) {
            if (other.flightOriginDate != null)
                return false;
        }
        else if (!flightOriginDate.equals(other.flightOriginDate))
            return false;
        if (departAirportIata == null) {
            if (other.departAirportIata != null)
                return false;
        }
        else if (!departAirportIata.equals(other.departAirportIata))
            return false;
        if (dcsFlightVersionNum == null) {
            if (other.dcsFlightVersionNum != null)
                return false;
        }
        else if (!dcsFlightVersionNum.equals(other.dcsFlightVersionNum))
            return false;
        if (legSeqNo == null) {
            if (other.legSeqNo != null)
                return false;
        }
        else if (!legSeqNo.equals(other.legSeqNo))
            return false;
        if (actionCode == null) {
            if (other.actionCode != null)
                return false;
        }
        else if (!actionCode.equals(other.actionCode))
            return false;
        if (actionStation == null) {
            if (other.actionStation != null)
                return false;
        }
        else if (!actionStation.equals(other.actionStation))
            return false;
        if (agentCode == null) {
            if (other.agentCode != null)
                return false;
        }
        else if (!agentCode.equals(other.agentCode))
            return false;
        if (dateStamp == null) {
            if (other.dateStamp != null)
                return false;
        }
        else if (!dateStamp.equals(other.dateStamp))
            return false;
        if (setAddress == null) {
            if (other.setAddress != null)
                return false;
        }
        else if (!setAddress.equals(other.setAddress))
            return false;
        if (aircraftTypeFull == null) {
            if (other.aircraftTypeFull != null)
                return false;
        }
        else if (!aircraftTypeFull.equals(other.aircraftTypeFull))
            return false;
        if (aircraftConfigCode == null) {
            if (other.aircraftConfigCode != null)
                return false;
        }
        else if (!aircraftConfigCode.equals(other.aircraftConfigCode))
            return false;
        if (airportFrom == null) {
            if (other.airportFrom != null)
                return false;
        }
        else if (!airportFrom.equals(other.airportFrom))
            return false;
        if (timeStamp == null) {
            if (other.timeStamp != null)
                return false;
        }
        else if (!timeStamp.equals(other.timeStamp))
            return false;
        if (aircraftRegCountry == null) {
            if (other.aircraftRegCountry != null)
                return false;
        }
        else if (!aircraftRegCountry.equals(other.aircraftRegCountry))
            return false;
        if (aircraftVersion == null) {
            if (other.aircraftVersion != null)
                return false;
        }
        else if (!aircraftVersion.equals(other.aircraftVersion))
            return false;
        if (airportTo == null) {
            if (other.airportTo != null)
                return false;
        }
        else if (!airportTo.equals(other.airportTo))
            return false;
        if (aircraftRegistration == null) {
            if (other.aircraftRegistration != null)
                return false;
        }
        else if (!aircraftRegistration.equals(other.aircraftRegistration))
            return false;
        if (apiArrivalReqd == null) {
            if (other.apiArrivalReqd != null)
                return false;
        }
        else if (!apiArrivalReqd.equals(other.apiArrivalReqd))
            return false;
        if (aircraftType_3Char == null) {
            if (other.aircraftType_3Char != null)
                return false;
        }
        else if (!aircraftType_3Char.equals(other.aircraftType_3Char))
            return false;
        if (apiArrivalSent == null) {
            if (other.apiArrivalSent != null)
                return false;
        }
        else if (!apiArrivalSent.equals(other.apiArrivalSent))
            return false;
        if (apiDepartureReqd == null) {
            if (other.apiDepartureReqd != null)
                return false;
        }
        else if (!apiDepartureReqd.equals(other.apiDepartureReqd))
            return false;
        if (apiDepartureSent == null) {
            if (other.apiDepartureSent != null)
                return false;
        }
        else if (!apiDepartureSent.equals(other.apiDepartureSent))
            return false;
        if (apisSent == null) {
            if (other.apisSent != null)
                return false;
        }
        else if (!apisSent.equals(other.apisSent))
            return false;
        if (appArrivalReqd == null) {
            if (other.appArrivalReqd != null)
                return false;
        }
        else if (!appArrivalReqd.equals(other.appArrivalReqd))
            return false;
        if (appDepartureReqd == null) {
            if (other.appDepartureReqd != null)
                return false;
        }
        else if (!appDepartureReqd.equals(other.appDepartureReqd))
            return false;
        if (aqqArrivalReqd == null) {
            if (other.aqqArrivalReqd != null)
                return false;
        }
        else if (!aqqArrivalReqd.equals(other.aqqArrivalReqd))
            return false;
        if (aqqDepartureReqd == null) {
            if (other.aqqDepartureReqd != null)
                return false;
        }
        else if (!aqqDepartureReqd.equals(other.aqqDepartureReqd))
            return false;
        if (aqqFlightCancelComplete == null) {
            if (other.aqqFlightCancelComplete != null)
                return false;
        }
        else if (!aqqFlightCancelComplete.equals(other.aqqFlightCancelComplete))
            return false;
        if (aqqFlightCloseComplete == null) {
            if (other.aqqFlightCloseComplete != null)
                return false;
        }
        else if (!aqqFlightCloseComplete.equals(other.aqqFlightCloseComplete))
            return false;
        if (autoDocCheckAdcActive == null) {
            if (other.autoDocCheckAdcActive != null)
                return false;
        }
        else if (!autoDocCheckAdcActive.equals(other.autoDocCheckAdcActive))
            return false;
        if (autoRegradeIndicator == null) {
            if (other.autoRegradeIndicator != null)
                return false;
        }
        else if (!autoRegradeIndicator.equals(other.autoRegradeIndicator))
            return false;
        if (baggageByPieceReqd == null) {
            if (other.baggageByPieceReqd != null)
                return false;
        }
        else if (!baggageByPieceReqd.equals(other.baggageByPieceReqd))
            return false;
        if (baggageByWeightReqd == null) {
            if (other.baggageByWeightReqd != null)
                return false;
        }
        else if (!baggageByWeightReqd.equals(other.baggageByWeightReqd))
            return false;
        if (baggageChuteNumOnBagTag == null) {
            if (other.baggageChuteNumOnBagTag != null)
                return false;
        }
        else if (!baggageChuteNumOnBagTag.equals(other.baggageChuteNumOnBagTag))
            return false;
        if (baggageTransferMsgProdT == null) {
            if (other.baggageTransferMsgProdT != null)
                return false;
        }
        else if (!baggageTransferMsgProdT.equals(other.baggageTransferMsgProdT))
            return false;
        if (baggageTransferMsgReqdT == null) {
            if (other.baggageTransferMsgReqdT != null)
                return false;
        }
        else if (!baggageTransferMsgReqdT.equals(other.baggageTransferMsgReqdT))
            return false;
        if (boardingStartTime == null) {
            if (other.boardingStartTime != null)
                return false;
        }
        else if (!boardingStartTime.equals(other.boardingStartTime))
            return false;
        if (cancelLandingAtADestn == null) {
            if (other.cancelLandingAtADestn != null)
                return false;
        }
        else if (!cancelLandingAtADestn.equals(other.cancelLandingAtADestn))
            return false;
        if (cbsaArrivalReqd == null) {
            if (other.cbsaArrivalReqd != null)
                return false;
        }
        else if (!cbsaArrivalReqd.equals(other.cbsaArrivalReqd))
            return false;
        if (cbsaDepartureReqd == null) {
            if (other.cbsaDepartureReqd != null)
                return false;
        }
        else if (!cbsaDepartureReqd.equals(other.cbsaDepartureReqd))
            return false;
        if (charterFlight == null) {
            if (other.charterFlight != null)
                return false;
        }
        else if (!charterFlight.equals(other.charterFlight))
            return false;
        if (checkInOptionIndicator == null) {
            if (other.checkInOptionIndicator != null)
                return false;
        }
        else if (!checkInOptionIndicator.equals(other.checkInOptionIndicator))
            return false;
        if (choleraCertificateReqd == null) {
            if (other.choleraCertificateReqd != null)
                return false;
        }
        else if (!choleraCertificateReqd.equals(other.choleraCertificateReqd))
            return false;
        if (codeshareFlightNumbers == null) {
            if (other.codeshareFlightNumbers != null)
                return false;
        }
        else if (!codeshareFlightNumbers.equals(other.codeshareFlightNumbers))
            return false;
        if (crewCode == null) {
            if (other.crewCode != null)
                return false;
        }
        else if (!crewCode.equals(other.crewCode))
            return false;
        if (documentAirlineCode == null) {
            if (other.documentAirlineCode != null)
                return false;
        }
        else if (!documentAirlineCode.equals(other.documentAirlineCode))
            return false;
        if (documentFlightNumber == null) {
            if (other.documentFlightNumber != null)
                return false;
        }
        else if (!documentFlightNumber.equals(other.documentFlightNumber))
            return false;
        if (estimatedDepartureTime == null) {
            if (other.estimatedDepartureTime != null)
                return false;
        }
        else if (!estimatedDepartureTime.equals(other.estimatedDepartureTime))
            return false;
        if (excessBagsRestricted == null) {
            if (other.excessBagsRestricted != null)
                return false;
        }
        else if (!excessBagsRestricted.equals(other.excessBagsRestricted))
            return false;
        if (fastTrackActive == null) {
            if (other.fastTrackActive != null)
                return false;
        }
        else if (!fastTrackActive.equals(other.fastTrackActive))
            return false;
        if (flightForDemoPurpose == null) {
            if (other.flightForDemoPurpose != null)
                return false;
        }
        else if (!flightForDemoPurpose.equals(other.flightForDemoPurpose))
            return false;
        if (flightInDisruptStatus == null) {
            if (other.flightInDisruptStatus != null)
                return false;
        }
        else if (!flightInDisruptStatus.equals(other.flightInDisruptStatus))
            return false;
        if (flightStatus == null) {
            if (other.flightStatus != null)
                return false;
        }
        else if (!flightStatus.equals(other.flightStatus))
            return false;
        if (flightType == null) {
            if (other.flightType != null)
                return false;
        }
        else if (!flightType.equals(other.flightType))
            return false;
        if (fomSent == null) {
            if (other.fomSent != null)
                return false;
        }
        else if (!fomSent.equals(other.fomSent))
            return false;
        if (freqTravellerListProdF == null) {
            if (other.freqTravellerListProdF != null)
                return false;
        }
        else if (!freqTravellerListProdF.equals(other.freqTravellerListProdF))
            return false;
        if (freqTravellerListReqdF == null) {
            if (other.freqTravellerListReqdF != null)
                return false;
        }
        else if (!freqTravellerListReqdF.equals(other.freqTravellerListReqdF))
            return false;
        if (ftlSent == null) {
            if (other.ftlSent != null)
                return false;
        }
        else if (!ftlSent.equals(other.ftlSent))
            return false;
        if (fullNameCheckinReqd == null) {
            if (other.fullNameCheckinReqd != null)
                return false;
        }
        else if (!fullNameCheckinReqd.equals(other.fullNameCheckinReqd))
            return false;
        if (fxEntryTimeStamp == null) {
            if (other.fxEntryTimeStamp != null)
                return false;
        }
        else if (!fxEntryTimeStamp.equals(other.fxEntryTimeStamp))
            return false;
        if (gateNumber == null) {
            if (other.gateNumber != null)
                return false;
        }
        else if (!gateNumber.equals(other.gateNumber))
            return false;
        if (handBaggageWeightReqd == null) {
            if (other.handBaggageWeightReqd != null)
                return false;
        }
        else if (!handBaggageWeightReqd.equals(other.handBaggageWeightReqd))
            return false;
        if (handbackMsgProdB == null) {
            if (other.handbackMsgProdB != null)
                return false;
        }
        else if (!handbackMsgProdB.equals(other.handbackMsgProdB))
            return false;
        if (handbackMsgReqdB == null) {
            if (other.handbackMsgReqdB != null)
                return false;
        }
        else if (!handbackMsgReqdB.equals(other.handbackMsgReqdB))
            return false;
        if (hbSent == null) {
            if (other.hbSent != null)
                return false;
        }
        else if (!hbSent.equals(other.hbSent))
            return false;
        if (idmSent == null) {
            if (other.idmSent != null)
                return false;
        }
        else if (!idmSent.equals(other.idmSent))
            return false;
        if (idmSubloadProdI == null) {
            if (other.idmSubloadProdI != null)
                return false;
        }
        else if (!idmSubloadProdI.equals(other.idmSubloadProdI))
            return false;
        if (idmSubloadReqdI == null) {
            if (other.idmSubloadReqdI != null)
                return false;
        }
        else if (!idmSubloadReqdI.equals(other.idmSubloadReqdI))
            return false;
        if (isCodeshare == null) {
            if (other.isCodeshare != null)
                return false;
        }
        else if (!isCodeshare.equals(other.isCodeshare))
            return false;
        if (loadSignalProdL == null) {
            if (other.loadSignalProdL != null)
                return false;
        }
        else if (!loadSignalProdL.equals(other.loadSignalProdL))
            return false;
        if (loadSignalReqdL == null) {
            if (other.loadSignalReqdL != null)
                return false;
        }
        else if (!loadSignalReqdL.equals(other.loadSignalReqdL))
            return false;
        if (maskCode == null) {
            if (other.maskCode != null)
                return false;
        }
        else if (!maskCode.equals(other.maskCode))
            return false;
        if (matarikiTasmanFlight == null) {
            if (other.matarikiTasmanFlight != null)
                return false;
        }
        else if (!matarikiTasmanFlight.equals(other.matarikiTasmanFlight))
            return false;
        if (mrktngFlghtOnBpassFlag == null) {
            if (other.mrktngFlghtOnBpassFlag != null)
                return false;
        }
        else if (!mrktngFlghtOnBpassFlag.equals(other.mrktngFlghtOnBpassFlag))
            return false;
        if (mrktngFlightOnBagtagFlag == null) {
            if (other.mrktngFlightOnBagtagFlag != null)
                return false;
        }
        else if (!mrktngFlightOnBagtagFlag.equals(other.mrktngFlightOnBagtagFlag))
            return false;
        if (mvtSent == null) {
            if (other.mvtSent != null)
                return false;
        }
        else if (!mvtSent.equals(other.mvtSent))
            return false;
        if (operatingCabinCrewCount == null) {
            if (other.operatingCabinCrewCount != null)
                return false;
        }
        else if (!operatingCabinCrewCount.equals(other.operatingCabinCrewCount))
            return false;
        if (operatingTechCrewCount == null) {
            if (other.operatingTechCrewCount != null)
                return false;
        }
        else if (!operatingTechCrewCount.equals(other.operatingTechCrewCount))
            return false;
        if (origAirlineCode == null) {
            if (other.origAirlineCode != null)
                return false;
        }
        else if (!origAirlineCode.equals(other.origAirlineCode))
            return false;
        if (origFlightLastVrsnNum == null) {
            if (other.origFlightLastVrsnNum != null)
                return false;
        }
        else if (!origFlightLastVrsnNum.equals(other.origFlightLastVrsnNum))
            return false;
        if (origFlightNumber == null) {
            if (other.origFlightNumber != null)
                return false;
        }
        else if (!origFlightNumber.equals(other.origFlightNumber))
            return false;
        if (origFlightOriginDate == null) {
            if (other.origFlightOriginDate != null)
                return false;
        }
        else if (!origFlightOriginDate.equals(other.origFlightOriginDate))
            return false;
        if (originatorTransitFlight == null) {
            if (other.originatorTransitFlight != null)
                return false;
        }
        else if (!originatorTransitFlight.equals(other.originatorTransitFlight))
            return false;
        if (pantryCode == null) {
            if (other.pantryCode != null)
                return false;
        }
        else if (!pantryCode.equals(other.pantryCode))
            return false;
        if (paxFirstNameReqd == null) {
            if (other.paxFirstNameReqd != null)
                return false;
        }
        else if (!paxFirstNameReqd.equals(other.paxFirstNameReqd))
            return false;
        if (paxInitialsReqd == null) {
            if (other.paxInitialsReqd != null)
                return false;
        }
        else if (!paxInitialsReqd.equals(other.paxInitialsReqd))
            return false;
        if (paxManifestProdM == null) {
            if (other.paxManifestProdM != null)
                return false;
        }
        else if (!paxManifestProdM.equals(other.paxManifestProdM))
            return false;
        if (paxManifestReqdM == null) {
            if (other.paxManifestReqdM != null)
                return false;
        }
        else if (!paxManifestReqdM.equals(other.paxManifestReqdM))
            return false;
        if (paxNamesTranfrd == null) {
            if (other.paxNamesTranfrd != null)
                return false;
        }
        else if (!paxNamesTranfrd.equals(other.paxNamesTranfrd))
            return false;
        if (paxServiceMsgProdH == null) {
            if (other.paxServiceMsgProdH != null)
                return false;
        }
        else if (!paxServiceMsgProdH.equals(other.paxServiceMsgProdH))
            return false;
        if (paxServiceMsgReqdH == null) {
            if (other.paxServiceMsgReqdH != null)
                return false;
        }
        else if (!paxServiceMsgReqdH.equals(other.paxServiceMsgReqdH))
            return false;
        if (pnlCodesharePaxCreated == null) {
            if (other.pnlCodesharePaxCreated != null)
                return false;
        }
        else if (!pnlCodesharePaxCreated.equals(other.pnlCodesharePaxCreated))
            return false;
        if (pnlExpectedThisFlight == null) {
            if (other.pnlExpectedThisFlight != null)
                return false;
        }
        else if (!pnlExpectedThisFlight.equals(other.pnlExpectedThisFlight))
            return false;
        if (preventSeatChanges == null) {
            if (other.preventSeatChanges != null)
                return false;
        }
        else if (!preventSeatChanges.equals(other.preventSeatChanges))
            return false;
        if (prlShootbackProd == null) {
            if (other.prlShootbackProd != null)
                return false;
        }
        else if (!prlShootbackProd.equals(other.prlShootbackProd))
            return false;
        if (psmSent == null) {
            if (other.psmSent != null)
                return false;
        }
        else if (!psmSent.equals(other.psmSent))
            return false;
        if (ptmPaxDisembarkingProdD == null) {
            if (other.ptmPaxDisembarkingProdD != null)
                return false;
        }
        else if (!ptmPaxDisembarkingProdD.equals(other.ptmPaxDisembarkingProdD))
            return false;
        if (ptmPaxDisembarkingReqdD == null) {
            if (other.ptmPaxDisembarkingReqdD != null)
                return false;
        }
        else if (!ptmPaxDisembarkingReqdD.equals(other.ptmPaxDisembarkingReqdD))
            return false;
        if (replaceDestination == null) {
            if (other.replaceDestination != null)
                return false;
        }
        else if (!replaceDestination.equals(other.replaceDestination))
            return false;
        if (schdArrivalDate == null) {
            if (other.schdArrivalDate != null)
                return false;
        }
        else if (!schdArrivalDate.equals(other.schdArrivalDate))
            return false;
        if (schdArrivalTime == null) {
            if (other.schdArrivalTime != null)
                return false;
        }
        else if (!schdArrivalTime.equals(other.schdArrivalTime))
            return false;
        if (schdDepartureTime == null) {
            if (other.schdDepartureTime != null)
                return false;
        }
        else if (!schdDepartureTime.equals(other.schdDepartureTime))
            return false;
        if (schdLegDepartureDate == null) {
            if (other.schdLegDepartureDate != null)
                return false;
        }
        else if (!schdLegDepartureDate.equals(other.schdLegDepartureDate))
            return false;
        if (seatPlanProdP == null) {
            if (other.seatPlanProdP != null)
                return false;
        }
        else if (!seatPlanProdP.equals(other.seatPlanProdP))
            return false;
        if (seatPlanReqdP == null) {
            if (other.seatPlanReqdP != null)
                return false;
        }
        else if (!seatPlanReqdP.equals(other.seatPlanReqdP))
            return false;
        if (seats_2SuitFlight == null) {
            if (other.seats_2SuitFlight != null)
                return false;
        }
        else if (!seats_2SuitFlight.equals(other.seats_2SuitFlight))
            return false;
        if (seatsOccupdSignalReqdO == null) {
            if (other.seatsOccupdSignalReqdO != null)
                return false;
        }
        else if (!seatsOccupdSignalReqdO.equals(other.seatsOccupdSignalReqdO))
            return false;
        if (seatsOccupdSignlProdO == null) {
            if (other.seatsOccupdSignlProdO != null)
                return false;
        }
        else if (!seatsOccupdSignlProdO.equals(other.seatsOccupdSignlProdO))
            return false;
        if (secureFlightArrivalReqd == null) {
            if (other.secureFlightArrivalReqd != null)
                return false;
        }
        else if (!secureFlightArrivalReqd.equals(other.secureFlightArrivalReqd))
            return false;
        if (secureFlightDepartureReqd == null) {
            if (other.secureFlightDepartureReqd != null)
                return false;
        }
        else if (!secureFlightDepartureReqd.equals(other.secureFlightDepartureReqd))
            return false;
        if (secureFlightOverflyReqd == null) {
            if (other.secureFlightOverflyReqd != null)
                return false;
        }
        else if (!secureFlightOverflyReqd.equals(other.secureFlightOverflyReqd))
            return false;
        if (skycouchFlight == null) {
            if (other.skycouchFlight != null)
                return false;
        }
        else if (!skycouchFlight.equals(other.skycouchFlight))
            return false;
        if (smallpoxCertificateReqd == null) {
            if (other.smallpoxCertificateReqd != null)
                return false;
        }
        else if (!smallpoxCertificateReqd.equals(other.smallpoxCertificateReqd))
            return false;
        if (tailNumber == null) {
            if (other.tailNumber != null)
                return false;
        }
        else if (!tailNumber.equals(other.tailNumber))
            return false;
        if (throughCheckInIndicator == null) {
            if (other.throughCheckInIndicator != null)
                return false;
        }
        else if (!throughCheckInIndicator.equals(other.throughCheckInIndicator))
            return false;
        if (ticketNumbersReqd == null) {
            if (other.ticketNumbersReqd != null)
                return false;
        }
        else if (!ticketNumbersReqd.equals(other.ticketNumbersReqd))
            return false;
        if (tpInhibitedAtThisStation == null) {
            if (other.tpInhibitedAtThisStation != null)
                return false;
        }
        else if (!tpInhibitedAtThisStation.equals(other.tpInhibitedAtThisStation))
            return false;
        if (visaReqd == null) {
            if (other.visaReqd != null)
                return false;
        }
        else if (!visaReqd.equals(other.visaReqd))
            return false;
        if (yellowFeverCertReqd == null) {
            if (other.yellowFeverCertReqd != null)
                return false;
        }
        else if (!yellowFeverCertReqd.equals(other.yellowFeverCertReqd))
            return false;
        if (deadBagVerifctnStation == null) {
            if (other.deadBagVerifctnStation != null)
                return false;
        }
        else if (!deadBagVerifctnStation.equals(other.deadBagVerifctnStation))
            return false;
        if (boardngInhbtrActvThsStatn == null) {
            if (other.boardngInhbtrActvThsStatn != null)
                return false;
        }
        else if (!boardngInhbtrActvThsStatn.equals(other.boardngInhbtrActvThsStatn))
            return false;
        if (trafficRestrctnsInForce == null) {
            if (other.trafficRestrctnsInForce != null)
                return false;
        }
        else if (!trafficRestrctnsInForce.equals(other.trafficRestrctnsInForce))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.flightIdComposite == null) ? 0 : this.flightIdComposite.hashCode());
        result = prime * result + ((this.airlineCode == null) ? 0 : this.airlineCode.hashCode());
        result = prime * result + ((this.flightNumber == null) ? 0 : this.flightNumber.hashCode());
        result = prime * result + ((this.flightOriginDate == null) ? 0 : this.flightOriginDate.hashCode());
        result = prime * result + ((this.departAirportIata == null) ? 0 : this.departAirportIata.hashCode());
        result = prime * result + ((this.dcsFlightVersionNum == null) ? 0 : this.dcsFlightVersionNum.hashCode());
        result = prime * result + ((this.legSeqNo == null) ? 0 : this.legSeqNo.hashCode());
        result = prime * result + ((this.actionCode == null) ? 0 : this.actionCode.hashCode());
        result = prime * result + ((this.actionStation == null) ? 0 : this.actionStation.hashCode());
        result = prime * result + ((this.agentCode == null) ? 0 : this.agentCode.hashCode());
        result = prime * result + ((this.dateStamp == null) ? 0 : this.dateStamp.hashCode());
        result = prime * result + ((this.setAddress == null) ? 0 : this.setAddress.hashCode());
        result = prime * result + ((this.aircraftTypeFull == null) ? 0 : this.aircraftTypeFull.hashCode());
        result = prime * result + ((this.aircraftConfigCode == null) ? 0 : this.aircraftConfigCode.hashCode());
        result = prime * result + ((this.airportFrom == null) ? 0 : this.airportFrom.hashCode());
        result = prime * result + ((this.timeStamp == null) ? 0 : this.timeStamp.hashCode());
        result = prime * result + ((this.aircraftRegCountry == null) ? 0 : this.aircraftRegCountry.hashCode());
        result = prime * result + ((this.aircraftVersion == null) ? 0 : this.aircraftVersion.hashCode());
        result = prime * result + ((this.airportTo == null) ? 0 : this.airportTo.hashCode());
        result = prime * result + ((this.aircraftRegistration == null) ? 0 : this.aircraftRegistration.hashCode());
        result = prime * result + ((this.apiArrivalReqd == null) ? 0 : this.apiArrivalReqd.hashCode());
        result = prime * result + ((this.aircraftType_3Char == null) ? 0 : this.aircraftType_3Char.hashCode());
        result = prime * result + ((this.apiArrivalSent == null) ? 0 : this.apiArrivalSent.hashCode());
        result = prime * result + ((this.apiDepartureReqd == null) ? 0 : this.apiDepartureReqd.hashCode());
        result = prime * result + ((this.apiDepartureSent == null) ? 0 : this.apiDepartureSent.hashCode());
        result = prime * result + ((this.apisSent == null) ? 0 : this.apisSent.hashCode());
        result = prime * result + ((this.appArrivalReqd == null) ? 0 : this.appArrivalReqd.hashCode());
        result = prime * result + ((this.appDepartureReqd == null) ? 0 : this.appDepartureReqd.hashCode());
        result = prime * result + ((this.aqqArrivalReqd == null) ? 0 : this.aqqArrivalReqd.hashCode());
        result = prime * result + ((this.aqqDepartureReqd == null) ? 0 : this.aqqDepartureReqd.hashCode());
        result = prime * result + ((this.aqqFlightCancelComplete == null) ? 0 : this.aqqFlightCancelComplete.hashCode());
        result = prime * result + ((this.aqqFlightCloseComplete == null) ? 0 : this.aqqFlightCloseComplete.hashCode());
        result = prime * result + ((this.autoDocCheckAdcActive == null) ? 0 : this.autoDocCheckAdcActive.hashCode());
        result = prime * result + ((this.autoRegradeIndicator == null) ? 0 : this.autoRegradeIndicator.hashCode());
        result = prime * result + ((this.baggageByPieceReqd == null) ? 0 : this.baggageByPieceReqd.hashCode());
        result = prime * result + ((this.baggageByWeightReqd == null) ? 0 : this.baggageByWeightReqd.hashCode());
        result = prime * result + ((this.baggageChuteNumOnBagTag == null) ? 0 : this.baggageChuteNumOnBagTag.hashCode());
        result = prime * result + ((this.baggageTransferMsgProdT == null) ? 0 : this.baggageTransferMsgProdT.hashCode());
        result = prime * result + ((this.baggageTransferMsgReqdT == null) ? 0 : this.baggageTransferMsgReqdT.hashCode());
        result = prime * result + ((this.boardingStartTime == null) ? 0 : this.boardingStartTime.hashCode());
        result = prime * result + ((this.cancelLandingAtADestn == null) ? 0 : this.cancelLandingAtADestn.hashCode());
        result = prime * result + ((this.cbsaArrivalReqd == null) ? 0 : this.cbsaArrivalReqd.hashCode());
        result = prime * result + ((this.cbsaDepartureReqd == null) ? 0 : this.cbsaDepartureReqd.hashCode());
        result = prime * result + ((this.charterFlight == null) ? 0 : this.charterFlight.hashCode());
        result = prime * result + ((this.checkInOptionIndicator == null) ? 0 : this.checkInOptionIndicator.hashCode());
        result = prime * result + ((this.choleraCertificateReqd == null) ? 0 : this.choleraCertificateReqd.hashCode());
        result = prime * result + ((this.codeshareFlightNumbers == null) ? 0 : this.codeshareFlightNumbers.hashCode());
        result = prime * result + ((this.crewCode == null) ? 0 : this.crewCode.hashCode());
        result = prime * result + ((this.documentAirlineCode == null) ? 0 : this.documentAirlineCode.hashCode());
        result = prime * result + ((this.documentFlightNumber == null) ? 0 : this.documentFlightNumber.hashCode());
        result = prime * result + ((this.estimatedDepartureTime == null) ? 0 : this.estimatedDepartureTime.hashCode());
        result = prime * result + ((this.excessBagsRestricted == null) ? 0 : this.excessBagsRestricted.hashCode());
        result = prime * result + ((this.fastTrackActive == null) ? 0 : this.fastTrackActive.hashCode());
        result = prime * result + ((this.flightForDemoPurpose == null) ? 0 : this.flightForDemoPurpose.hashCode());
        result = prime * result + ((this.flightInDisruptStatus == null) ? 0 : this.flightInDisruptStatus.hashCode());
        result = prime * result + ((this.flightStatus == null) ? 0 : this.flightStatus.hashCode());
        result = prime * result + ((this.flightType == null) ? 0 : this.flightType.hashCode());
        result = prime * result + ((this.fomSent == null) ? 0 : this.fomSent.hashCode());
        result = prime * result + ((this.freqTravellerListProdF == null) ? 0 : this.freqTravellerListProdF.hashCode());
        result = prime * result + ((this.freqTravellerListReqdF == null) ? 0 : this.freqTravellerListReqdF.hashCode());
        result = prime * result + ((this.ftlSent == null) ? 0 : this.ftlSent.hashCode());
        result = prime * result + ((this.fullNameCheckinReqd == null) ? 0 : this.fullNameCheckinReqd.hashCode());
        result = prime * result + ((this.fxEntryTimeStamp == null) ? 0 : this.fxEntryTimeStamp.hashCode());
        result = prime * result + ((this.gateNumber == null) ? 0 : this.gateNumber.hashCode());
        result = prime * result + ((this.handBaggageWeightReqd == null) ? 0 : this.handBaggageWeightReqd.hashCode());
        result = prime * result + ((this.handbackMsgProdB == null) ? 0 : this.handbackMsgProdB.hashCode());
        result = prime * result + ((this.handbackMsgReqdB == null) ? 0 : this.handbackMsgReqdB.hashCode());
        result = prime * result + ((this.hbSent == null) ? 0 : this.hbSent.hashCode());
        result = prime * result + ((this.idmSent == null) ? 0 : this.idmSent.hashCode());
        result = prime * result + ((this.idmSubloadProdI == null) ? 0 : this.idmSubloadProdI.hashCode());
        result = prime * result + ((this.idmSubloadReqdI == null) ? 0 : this.idmSubloadReqdI.hashCode());
        result = prime * result + ((this.isCodeshare == null) ? 0 : this.isCodeshare.hashCode());
        result = prime * result + ((this.loadSignalProdL == null) ? 0 : this.loadSignalProdL.hashCode());
        result = prime * result + ((this.loadSignalReqdL == null) ? 0 : this.loadSignalReqdL.hashCode());
        result = prime * result + ((this.maskCode == null) ? 0 : this.maskCode.hashCode());
        result = prime * result + ((this.matarikiTasmanFlight == null) ? 0 : this.matarikiTasmanFlight.hashCode());
        result = prime * result + ((this.mrktngFlghtOnBpassFlag == null) ? 0 : this.mrktngFlghtOnBpassFlag.hashCode());
        result = prime * result + ((this.mrktngFlightOnBagtagFlag == null) ? 0 : this.mrktngFlightOnBagtagFlag.hashCode());
        result = prime * result + ((this.mvtSent == null) ? 0 : this.mvtSent.hashCode());
        result = prime * result + ((this.operatingCabinCrewCount == null) ? 0 : this.operatingCabinCrewCount.hashCode());
        result = prime * result + ((this.operatingTechCrewCount == null) ? 0 : this.operatingTechCrewCount.hashCode());
        result = prime * result + ((this.origAirlineCode == null) ? 0 : this.origAirlineCode.hashCode());
        result = prime * result + ((this.origFlightLastVrsnNum == null) ? 0 : this.origFlightLastVrsnNum.hashCode());
        result = prime * result + ((this.origFlightNumber == null) ? 0 : this.origFlightNumber.hashCode());
        result = prime * result + ((this.origFlightOriginDate == null) ? 0 : this.origFlightOriginDate.hashCode());
        result = prime * result + ((this.originatorTransitFlight == null) ? 0 : this.originatorTransitFlight.hashCode());
        result = prime * result + ((this.pantryCode == null) ? 0 : this.pantryCode.hashCode());
        result = prime * result + ((this.paxFirstNameReqd == null) ? 0 : this.paxFirstNameReqd.hashCode());
        result = prime * result + ((this.paxInitialsReqd == null) ? 0 : this.paxInitialsReqd.hashCode());
        result = prime * result + ((this.paxManifestProdM == null) ? 0 : this.paxManifestProdM.hashCode());
        result = prime * result + ((this.paxManifestReqdM == null) ? 0 : this.paxManifestReqdM.hashCode());
        result = prime * result + ((this.paxNamesTranfrd == null) ? 0 : this.paxNamesTranfrd.hashCode());
        result = prime * result + ((this.paxServiceMsgProdH == null) ? 0 : this.paxServiceMsgProdH.hashCode());
        result = prime * result + ((this.paxServiceMsgReqdH == null) ? 0 : this.paxServiceMsgReqdH.hashCode());
        result = prime * result + ((this.pnlCodesharePaxCreated == null) ? 0 : this.pnlCodesharePaxCreated.hashCode());
        result = prime * result + ((this.pnlExpectedThisFlight == null) ? 0 : this.pnlExpectedThisFlight.hashCode());
        result = prime * result + ((this.preventSeatChanges == null) ? 0 : this.preventSeatChanges.hashCode());
        result = prime * result + ((this.prlShootbackProd == null) ? 0 : this.prlShootbackProd.hashCode());
        result = prime * result + ((this.psmSent == null) ? 0 : this.psmSent.hashCode());
        result = prime * result + ((this.ptmPaxDisembarkingProdD == null) ? 0 : this.ptmPaxDisembarkingProdD.hashCode());
        result = prime * result + ((this.ptmPaxDisembarkingReqdD == null) ? 0 : this.ptmPaxDisembarkingReqdD.hashCode());
        result = prime * result + ((this.replaceDestination == null) ? 0 : this.replaceDestination.hashCode());
        result = prime * result + ((this.schdArrivalDate == null) ? 0 : this.schdArrivalDate.hashCode());
        result = prime * result + ((this.schdArrivalTime == null) ? 0 : this.schdArrivalTime.hashCode());
        result = prime * result + ((this.schdDepartureTime == null) ? 0 : this.schdDepartureTime.hashCode());
        result = prime * result + ((this.schdLegDepartureDate == null) ? 0 : this.schdLegDepartureDate.hashCode());
        result = prime * result + ((this.seatPlanProdP == null) ? 0 : this.seatPlanProdP.hashCode());
        result = prime * result + ((this.seatPlanReqdP == null) ? 0 : this.seatPlanReqdP.hashCode());
        result = prime * result + ((this.seats_2SuitFlight == null) ? 0 : this.seats_2SuitFlight.hashCode());
        result = prime * result + ((this.seatsOccupdSignalReqdO == null) ? 0 : this.seatsOccupdSignalReqdO.hashCode());
        result = prime * result + ((this.seatsOccupdSignlProdO == null) ? 0 : this.seatsOccupdSignlProdO.hashCode());
        result = prime * result + ((this.secureFlightArrivalReqd == null) ? 0 : this.secureFlightArrivalReqd.hashCode());
        result = prime * result + ((this.secureFlightDepartureReqd == null) ? 0 : this.secureFlightDepartureReqd.hashCode());
        result = prime * result + ((this.secureFlightOverflyReqd == null) ? 0 : this.secureFlightOverflyReqd.hashCode());
        result = prime * result + ((this.skycouchFlight == null) ? 0 : this.skycouchFlight.hashCode());
        result = prime * result + ((this.smallpoxCertificateReqd == null) ? 0 : this.smallpoxCertificateReqd.hashCode());
        result = prime * result + ((this.tailNumber == null) ? 0 : this.tailNumber.hashCode());
        result = prime * result + ((this.throughCheckInIndicator == null) ? 0 : this.throughCheckInIndicator.hashCode());
        result = prime * result + ((this.ticketNumbersReqd == null) ? 0 : this.ticketNumbersReqd.hashCode());
        result = prime * result + ((this.tpInhibitedAtThisStation == null) ? 0 : this.tpInhibitedAtThisStation.hashCode());
        result = prime * result + ((this.visaReqd == null) ? 0 : this.visaReqd.hashCode());
        result = prime * result + ((this.yellowFeverCertReqd == null) ? 0 : this.yellowFeverCertReqd.hashCode());
        result = prime * result + ((this.deadBagVerifctnStation == null) ? 0 : this.deadBagVerifctnStation.hashCode());
        result = prime * result + ((this.boardngInhbtrActvThsStatn == null) ? 0 : this.boardngInhbtrActvThsStatn.hashCode());
        result = prime * result + ((this.trafficRestrctnsInForce == null) ? 0 : this.trafficRestrctnsInForce.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Leg (");

        sb.append(flightIdComposite);
        sb.append(", ").append(airlineCode);
        sb.append(", ").append(flightNumber);
        sb.append(", ").append(flightOriginDate);
        sb.append(", ").append(departAirportIata);
        sb.append(", ").append(dcsFlightVersionNum);
        sb.append(", ").append(legSeqNo);
        sb.append(", ").append(actionCode);
        sb.append(", ").append(actionStation);
        sb.append(", ").append(agentCode);
        sb.append(", ").append(dateStamp);
        sb.append(", ").append(setAddress);
        sb.append(", ").append(aircraftTypeFull);
        sb.append(", ").append(aircraftConfigCode);
        sb.append(", ").append(airportFrom);
        sb.append(", ").append(timeStamp);
        sb.append(", ").append(aircraftRegCountry);
        sb.append(", ").append(aircraftVersion);
        sb.append(", ").append(airportTo);
        sb.append(", ").append(aircraftRegistration);
        sb.append(", ").append(apiArrivalReqd);
        sb.append(", ").append(aircraftType_3Char);
        sb.append(", ").append(apiArrivalSent);
        sb.append(", ").append(apiDepartureReqd);
        sb.append(", ").append(apiDepartureSent);
        sb.append(", ").append(apisSent);
        sb.append(", ").append(appArrivalReqd);
        sb.append(", ").append(appDepartureReqd);
        sb.append(", ").append(aqqArrivalReqd);
        sb.append(", ").append(aqqDepartureReqd);
        sb.append(", ").append(aqqFlightCancelComplete);
        sb.append(", ").append(aqqFlightCloseComplete);
        sb.append(", ").append(autoDocCheckAdcActive);
        sb.append(", ").append(autoRegradeIndicator);
        sb.append(", ").append(baggageByPieceReqd);
        sb.append(", ").append(baggageByWeightReqd);
        sb.append(", ").append(baggageChuteNumOnBagTag);
        sb.append(", ").append(baggageTransferMsgProdT);
        sb.append(", ").append(baggageTransferMsgReqdT);
        sb.append(", ").append(boardingStartTime);
        sb.append(", ").append(cancelLandingAtADestn);
        sb.append(", ").append(cbsaArrivalReqd);
        sb.append(", ").append(cbsaDepartureReqd);
        sb.append(", ").append(charterFlight);
        sb.append(", ").append(checkInOptionIndicator);
        sb.append(", ").append(choleraCertificateReqd);
        sb.append(", ").append(codeshareFlightNumbers);
        sb.append(", ").append(crewCode);
        sb.append(", ").append(documentAirlineCode);
        sb.append(", ").append(documentFlightNumber);
        sb.append(", ").append(estimatedDepartureTime);
        sb.append(", ").append(excessBagsRestricted);
        sb.append(", ").append(fastTrackActive);
        sb.append(", ").append(flightForDemoPurpose);
        sb.append(", ").append(flightInDisruptStatus);
        sb.append(", ").append(flightStatus);
        sb.append(", ").append(flightType);
        sb.append(", ").append(fomSent);
        sb.append(", ").append(freqTravellerListProdF);
        sb.append(", ").append(freqTravellerListReqdF);
        sb.append(", ").append(ftlSent);
        sb.append(", ").append(fullNameCheckinReqd);
        sb.append(", ").append(fxEntryTimeStamp);
        sb.append(", ").append(gateNumber);
        sb.append(", ").append(handBaggageWeightReqd);
        sb.append(", ").append(handbackMsgProdB);
        sb.append(", ").append(handbackMsgReqdB);
        sb.append(", ").append(hbSent);
        sb.append(", ").append(idmSent);
        sb.append(", ").append(idmSubloadProdI);
        sb.append(", ").append(idmSubloadReqdI);
        sb.append(", ").append(isCodeshare);
        sb.append(", ").append(loadSignalProdL);
        sb.append(", ").append(loadSignalReqdL);
        sb.append(", ").append(maskCode);
        sb.append(", ").append(matarikiTasmanFlight);
        sb.append(", ").append(mrktngFlghtOnBpassFlag);
        sb.append(", ").append(mrktngFlightOnBagtagFlag);
        sb.append(", ").append(mvtSent);
        sb.append(", ").append(operatingCabinCrewCount);
        sb.append(", ").append(operatingTechCrewCount);
        sb.append(", ").append(origAirlineCode);
        sb.append(", ").append(origFlightLastVrsnNum);
        sb.append(", ").append(origFlightNumber);
        sb.append(", ").append(origFlightOriginDate);
        sb.append(", ").append(originatorTransitFlight);
        sb.append(", ").append(pantryCode);
        sb.append(", ").append(paxFirstNameReqd);
        sb.append(", ").append(paxInitialsReqd);
        sb.append(", ").append(paxManifestProdM);
        sb.append(", ").append(paxManifestReqdM);
        sb.append(", ").append(paxNamesTranfrd);
        sb.append(", ").append(paxServiceMsgProdH);
        sb.append(", ").append(paxServiceMsgReqdH);
        sb.append(", ").append(pnlCodesharePaxCreated);
        sb.append(", ").append(pnlExpectedThisFlight);
        sb.append(", ").append(preventSeatChanges);
        sb.append(", ").append(prlShootbackProd);
        sb.append(", ").append(psmSent);
        sb.append(", ").append(ptmPaxDisembarkingProdD);
        sb.append(", ").append(ptmPaxDisembarkingReqdD);
        sb.append(", ").append(replaceDestination);
        sb.append(", ").append(schdArrivalDate);
        sb.append(", ").append(schdArrivalTime);
        sb.append(", ").append(schdDepartureTime);
        sb.append(", ").append(schdLegDepartureDate);
        sb.append(", ").append(seatPlanProdP);
        sb.append(", ").append(seatPlanReqdP);
        sb.append(", ").append(seats_2SuitFlight);
        sb.append(", ").append(seatsOccupdSignalReqdO);
        sb.append(", ").append(seatsOccupdSignlProdO);
        sb.append(", ").append(secureFlightArrivalReqd);
        sb.append(", ").append(secureFlightDepartureReqd);
        sb.append(", ").append(secureFlightOverflyReqd);
        sb.append(", ").append(skycouchFlight);
        sb.append(", ").append(smallpoxCertificateReqd);
        sb.append(", ").append(tailNumber);
        sb.append(", ").append(throughCheckInIndicator);
        sb.append(", ").append(ticketNumbersReqd);
        sb.append(", ").append(tpInhibitedAtThisStation);
        sb.append(", ").append(visaReqd);
        sb.append(", ").append(yellowFeverCertReqd);
        sb.append(", ").append(deadBagVerifctnStation);
        sb.append(", ").append(boardngInhbtrActvThsStatn);
        sb.append(", ").append(trafficRestrctnsInForce);

        sb.append(")");
        return sb.toString();
    }
}
