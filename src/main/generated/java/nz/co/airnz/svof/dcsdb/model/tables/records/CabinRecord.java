/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.dcsdb.model.tables.records;


import java.sql.Date;

import javax.annotation.Generated;

import nz.co.airnz.svof.dcsdb.model.tables.Cabin;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CabinRecord extends UpdatableRecordImpl<CabinRecord> {

    private static final long serialVersionUID = -1404430258;

    /**
     * Setter for <code>dcs.cabin.flight_id_composite</code>.
     */
    public CabinRecord setFlightIdComposite(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.flight_id_composite</code>.
     */
    public String getFlightIdComposite() {
        return (String) get(0);
    }

    /**
     * Setter for <code>dcs.cabin.airline_code</code>.
     */
    public CabinRecord setAirlineCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.airline_code</code>.
     */
    public String getAirlineCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>dcs.cabin.flight_number</code>.
     */
    public CabinRecord setFlightNumber(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.flight_number</code>.
     */
    public String getFlightNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>dcs.cabin.flight_origin_date</code>.
     */
    public CabinRecord setFlightOriginDate(Date value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.flight_origin_date</code>.
     */
    public Date getFlightOriginDate() {
        return (Date) get(3);
    }

    /**
     * Setter for <code>dcs.cabin.dcs_flight_version_num</code>.
     */
    public CabinRecord setDcsFlightVersionNum(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.dcs_flight_version_num</code>.
     */
    public Integer getDcsFlightVersionNum() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>dcs.cabin.class_character</code>.
     */
    public CabinRecord setClassCharacter(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.class_character</code>.
     */
    public String getClassCharacter() {
        return (String) get(5);
    }

    /**
     * Setter for <code>dcs.cabin.leg_seq_num</code>.
     */
    public CabinRecord setLegSeqNum(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.leg_seq_num</code>.
     */
    public Integer getLegSeqNum() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>dcs.cabin.seats_configuration</code>. Scheduled/Planned number of seats in a class
     */
    public CabinRecord setSeatsConfiguration(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.seats_configuration</code>. Scheduled/Planned number of seats in a class
     */
    public Integer getSeatsConfiguration() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>dcs.cabin.saleable_seat_configuration</code>. Scheduled/Planned number of seats in a class
     */
    public CabinRecord setSaleableSeatConfiguration(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.saleable_seat_configuration</code>. Scheduled/Planned number of seats in a class
     */
    public Integer getSaleableSeatConfiguration() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>dcs.cabin.total_passengers_booked</code>. Total number of Passengers booked in a class.
     */
    public CabinRecord setTotalPassengersBooked(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_passengers_booked</code>. Total number of Passengers booked in a class.
     */
    public Integer getTotalPassengersBooked() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>dcs.cabin.total_adults_accepted</code>. Total number of Adults accepted in a class.
     */
    public CabinRecord setTotalAdultsAccepted(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_adults_accepted</code>. Total number of Adults accepted in a class.
     */
    public Integer getTotalAdultsAccepted() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>dcs.cabin.total_sportspersons_accepted</code>. Total number of Sportspersons accepted in a class.
     */
    public CabinRecord setTotalSportspersonsAccepted(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_sportspersons_accepted</code>. Total number of Sportspersons accepted in a class.
     */
    public Integer getTotalSportspersonsAccepted() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>dcs.cabin.total_children_accepted</code>. Total number of Children accepted in a class.
     */
    public CabinRecord setTotalChildrenAccepted(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_children_accepted</code>. Total number of Children accepted in a class.
     */
    public Integer getTotalChildrenAccepted() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>dcs.cabin.total_infants_accepted</code>. Total number of Infants accepted in a class
     */
    public CabinRecord setTotalInfantsAccepted(Integer value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_infants_accepted</code>. Total number of Infants accepted in a class
     */
    public Integer getTotalInfantsAccepted() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>dcs.cabin.child_weight_constant</code>. Child's Weight Constant for a given Class, used for Weight &amp; Balance of an aircraft.
     */
    public CabinRecord setChildWeightConstant(Integer value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.child_weight_constant</code>. Child's Weight Constant for a given Class, used for Weight &amp; Balance of an aircraft.
     */
    public Integer getChildWeightConstant() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_children</code>. Total number of Children accepted in a given class.
     */
    public CabinRecord setNumOfChildren(Integer value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_children</code>. Total number of Children accepted in a given class.
     */
    public Integer getNumOfChildren() {
        return (Integer) get(15);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_infants</code>. Total number of Infants accepted in  a given class.
     */
    public CabinRecord setNumOfInfants(Integer value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_infants</code>. Total number of Infants accepted in  a given class.
     */
    public Integer getNumOfInfants() {
        return (Integer) get(16);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_sports_persons</code>. Total number of Sportspersons accepted in  a given class.
     */
    public CabinRecord setNumOfSportsPersons(Integer value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_sports_persons</code>. Total number of Sportspersons accepted in  a given class.
     */
    public Integer getNumOfSportsPersons() {
        return (Integer) get(17);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_subload_staff</code>. Total number of Subload Staffs accepted in  a given class.
     */
    public CabinRecord setNumOfSubloadStaff(Integer value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_subload_staff</code>. Total number of Subload Staffs accepted in  a given class.
     */
    public Integer getNumOfSubloadStaff() {
        return (Integer) get(18);
    }

    /**
     * Setter for <code>dcs.cabin.sprts_persn_weight_cnstnt</code>. Sportsperson's Weight Constant for  a given Class, used for Weight &amp; Balance of an aircraft.
     */
    public CabinRecord setSprtsPersnWeightCnstnt(Integer value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.sprts_persn_weight_cnstnt</code>. Sportsperson's Weight Constant for  a given Class, used for Weight &amp; Balance of an aircraft.
     */
    public Integer getSprtsPersnWeightCnstnt() {
        return (Integer) get(19);
    }

    /**
     * Setter for <code>dcs.cabin.total_baggage_pieces</code>. Total number of baggage loaded by pieces in  a given class.
     */
    public CabinRecord setTotalBaggagePieces(Integer value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_baggage_pieces</code>. Total number of baggage loaded by pieces in  a given class.
     */
    public Integer getTotalBaggagePieces() {
        return (Integer) get(20);
    }

    /**
     * Setter for <code>dcs.cabin.total_baggage_weight</code>. Total number of baggage loaded by weight in  a given class.
     */
    public CabinRecord setTotalBaggageWeight(Integer value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_baggage_weight</code>. Total number of baggage loaded by weight in  a given class.
     */
    public Integer getTotalBaggageWeight() {
        return (Integer) get(21);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_level_7_pax</code>. The maximum number of subload staff that may be accepted to each destination without exceeding the payload for a given class.
     */
    public CabinRecord setNumOfLevel_7Pax(Integer value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_level_7_pax</code>. The maximum number of subload staff that may be accepted to each destination without exceeding the payload for a given class.
     */
    public Integer getNumOfLevel_7Pax() {
        return (Integer) get(22);
    }

    /**
     * Setter for <code>dcs.cabin.num_of_level_7a_pax</code>. The number of subload passengers who have been accepted and seated from ALL stations to each destination for a given class.
     */
    public CabinRecord setNumOfLevel_7aPax(Integer value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.num_of_level_7a_pax</code>. The number of subload passengers who have been accepted and seated from ALL stations to each destination for a given class.
     */
    public Integer getNumOfLevel_7aPax() {
        return (Integer) get(23);
    }

    /**
     * Setter for <code>dcs.cabin.total_pax_final_sales</code>. Final passenger counts accepted into a given class of an aircraft at the departure station.
     */
    public CabinRecord setTotalPaxFinalSales(Integer value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.total_pax_final_sales</code>. Final passenger counts accepted into a given class of an aircraft at the departure station.
     */
    public Integer getTotalPaxFinalSales() {
        return (Integer) get(24);
    }

    /**
     * Setter for <code>dcs.cabin.depart_airport_iata</code>.
     */
    public CabinRecord setDepartAirportIata(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>dcs.cabin.depart_airport_iata</code>.
     */
    public String getDepartAirportIata() {
        return (String) get(25);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CabinRecord
     */
    public CabinRecord() {
        super(Cabin.CABIN);
    }

    /**
     * Create a detached, initialised CabinRecord
     */
    public CabinRecord(String flightIdComposite, String airlineCode, String flightNumber, Date flightOriginDate, Integer dcsFlightVersionNum, String classCharacter, Integer legSeqNum, Integer seatsConfiguration, Integer saleableSeatConfiguration, Integer totalPassengersBooked, Integer totalAdultsAccepted, Integer totalSportspersonsAccepted, Integer totalChildrenAccepted, Integer totalInfantsAccepted, Integer childWeightConstant, Integer numOfChildren, Integer numOfInfants, Integer numOfSportsPersons, Integer numOfSubloadStaff, Integer sprtsPersnWeightCnstnt, Integer totalBaggagePieces, Integer totalBaggageWeight, Integer numOfLevel_7Pax, Integer numOfLevel_7aPax, Integer totalPaxFinalSales, String departAirportIata) {
        super(Cabin.CABIN);

        set(0, flightIdComposite);
        set(1, airlineCode);
        set(2, flightNumber);
        set(3, flightOriginDate);
        set(4, dcsFlightVersionNum);
        set(5, classCharacter);
        set(6, legSeqNum);
        set(7, seatsConfiguration);
        set(8, saleableSeatConfiguration);
        set(9, totalPassengersBooked);
        set(10, totalAdultsAccepted);
        set(11, totalSportspersonsAccepted);
        set(12, totalChildrenAccepted);
        set(13, totalInfantsAccepted);
        set(14, childWeightConstant);
        set(15, numOfChildren);
        set(16, numOfInfants);
        set(17, numOfSportsPersons);
        set(18, numOfSubloadStaff);
        set(19, sprtsPersnWeightCnstnt);
        set(20, totalBaggagePieces);
        set(21, totalBaggageWeight);
        set(22, numOfLevel_7Pax);
        set(23, numOfLevel_7aPax);
        set(24, totalPaxFinalSales);
        set(25, departAirportIata);
    }
}
