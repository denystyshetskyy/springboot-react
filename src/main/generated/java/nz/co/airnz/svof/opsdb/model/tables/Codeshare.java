/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.opsdb.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nz.co.airnz.svof.opsdb.model.Keys;
import nz.co.airnz.svof.opsdb.model.Ops;
import nz.co.airnz.svof.opsdb.model.tables.records.CodeshareRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Codeshare extends TableImpl<CodeshareRecord> {

    private static final long serialVersionUID = 576186667;

    /**
     * The reference instance of <code>ops.codeshare</code>
     */
    public static final Codeshare CODESHARE = new Codeshare();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeshareRecord> getRecordType() {
        return CodeshareRecord.class;
    }

    /**
     * The column <code>ops.codeshare.leg_no</code>.
     */
    public final TableField<CodeshareRecord, Integer> LEG_NO = createField("leg_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ops.codeshare.update_key</code>.
     */
    public final TableField<CodeshareRecord, Integer> UPDATE_KEY = createField("update_key", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ops.codeshare.fn_carrier</code>.
     */
    public final TableField<CodeshareRecord, String> FN_CARRIER = createField("fn_carrier", org.jooq.impl.SQLDataType.VARCHAR.length(2).nullable(false), this, "");

    /**
     * The column <code>ops.codeshare.fn_number</code>.
     */
    public final TableField<CodeshareRecord, Integer> FN_NUMBER = createField("fn_number", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>ops.codeshare</code> table reference
     */
    public Codeshare() {
        this("codeshare", null);
    }

    /**
     * Create an aliased <code>ops.codeshare</code> table reference
     */
    public Codeshare(String alias) {
        this(alias, CODESHARE);
    }

    private Codeshare(String alias, Table<CodeshareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Codeshare(String alias, Table<CodeshareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ops.OPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeshareRecord> getPrimaryKey() {
        return Keys.PK_CODE_SHARE_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeshareRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeshareRecord>>asList(Keys.PK_CODE_SHARE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CodeshareRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CodeshareRecord, ?>>asList(Keys.CODESHARE__FK_OPS_CODESHARE_OPS_LEG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Codeshare as(String alias) {
        return new Codeshare(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Codeshare rename(String name) {
        return new Codeshare(name, null);
    }
}
