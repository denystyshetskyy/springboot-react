/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.dcsdb.model.tables.pojos;


import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flight implements Serializable {

    private static final long serialVersionUID = -1166040567;

    private String    flightIdComposite;
    private String    airlineCode;
    private String    flightNumber;
    private Date      flightOriginDate;
    private Integer   dcsFlightVersionNum;
    private String    airportFrom;
    private String    airportTo;
    private String    internationalDomestic;
    private String    businessEventType;
    private String    businessEventCategory;
    private String    businessEventLegState;
    private Timestamp businessEventMessageTime;
    private Timestamp businessEventTime;

    public Flight() {}

    public Flight(Flight value) {
        this.flightIdComposite = value.flightIdComposite;
        this.airlineCode = value.airlineCode;
        this.flightNumber = value.flightNumber;
        this.flightOriginDate = value.flightOriginDate;
        this.dcsFlightVersionNum = value.dcsFlightVersionNum;
        this.airportFrom = value.airportFrom;
        this.airportTo = value.airportTo;
        this.internationalDomestic = value.internationalDomestic;
        this.businessEventType = value.businessEventType;
        this.businessEventCategory = value.businessEventCategory;
        this.businessEventLegState = value.businessEventLegState;
        this.businessEventMessageTime = value.businessEventMessageTime;
        this.businessEventTime = value.businessEventTime;
    }

    public Flight(
        String    flightIdComposite,
        String    airlineCode,
        String    flightNumber,
        Date      flightOriginDate,
        Integer   dcsFlightVersionNum,
        String    airportFrom,
        String    airportTo,
        String    internationalDomestic,
        String    businessEventType,
        String    businessEventCategory,
        String    businessEventLegState,
        Timestamp businessEventMessageTime,
        Timestamp businessEventTime
    ) {
        this.flightIdComposite = flightIdComposite;
        this.airlineCode = airlineCode;
        this.flightNumber = flightNumber;
        this.flightOriginDate = flightOriginDate;
        this.dcsFlightVersionNum = dcsFlightVersionNum;
        this.airportFrom = airportFrom;
        this.airportTo = airportTo;
        this.internationalDomestic = internationalDomestic;
        this.businessEventType = businessEventType;
        this.businessEventCategory = businessEventCategory;
        this.businessEventLegState = businessEventLegState;
        this.businessEventMessageTime = businessEventMessageTime;
        this.businessEventTime = businessEventTime;
    }

    public String getFlightIdComposite() {
        return this.flightIdComposite;
    }

    public Flight setFlightIdComposite(String flightIdComposite) {
        this.flightIdComposite = flightIdComposite;
        return this;
    }

    public String getAirlineCode() {
        return this.airlineCode;
    }

    public Flight setAirlineCode(String airlineCode) {
        this.airlineCode = airlineCode;
        return this;
    }

    public String getFlightNumber() {
        return this.flightNumber;
    }

    public Flight setFlightNumber(String flightNumber) {
        this.flightNumber = flightNumber;
        return this;
    }

    public Date getFlightOriginDate() {
        return this.flightOriginDate;
    }

    public Flight setFlightOriginDate(Date flightOriginDate) {
        this.flightOriginDate = flightOriginDate;
        return this;
    }

    public Integer getDcsFlightVersionNum() {
        return this.dcsFlightVersionNum;
    }

    public Flight setDcsFlightVersionNum(Integer dcsFlightVersionNum) {
        this.dcsFlightVersionNum = dcsFlightVersionNum;
        return this;
    }

    public String getAirportFrom() {
        return this.airportFrom;
    }

    public Flight setAirportFrom(String airportFrom) {
        this.airportFrom = airportFrom;
        return this;
    }

    public String getAirportTo() {
        return this.airportTo;
    }

    public Flight setAirportTo(String airportTo) {
        this.airportTo = airportTo;
        return this;
    }

    public String getInternationalDomestic() {
        return this.internationalDomestic;
    }

    public Flight setInternationalDomestic(String internationalDomestic) {
        this.internationalDomestic = internationalDomestic;
        return this;
    }

    public String getBusinessEventType() {
        return this.businessEventType;
    }

    public Flight setBusinessEventType(String businessEventType) {
        this.businessEventType = businessEventType;
        return this;
    }

    public String getBusinessEventCategory() {
        return this.businessEventCategory;
    }

    public Flight setBusinessEventCategory(String businessEventCategory) {
        this.businessEventCategory = businessEventCategory;
        return this;
    }

    public String getBusinessEventLegState() {
        return this.businessEventLegState;
    }

    public Flight setBusinessEventLegState(String businessEventLegState) {
        this.businessEventLegState = businessEventLegState;
        return this;
    }

    public Timestamp getBusinessEventMessageTime() {
        return this.businessEventMessageTime;
    }

    public Flight setBusinessEventMessageTime(Timestamp businessEventMessageTime) {
        this.businessEventMessageTime = businessEventMessageTime;
        return this;
    }

    public Timestamp getBusinessEventTime() {
        return this.businessEventTime;
    }

    public Flight setBusinessEventTime(Timestamp businessEventTime) {
        this.businessEventTime = businessEventTime;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Flight other = (Flight) obj;
        if (flightIdComposite == null) {
            if (other.flightIdComposite != null)
                return false;
        }
        else if (!flightIdComposite.equals(other.flightIdComposite))
            return false;
        if (airlineCode == null) {
            if (other.airlineCode != null)
                return false;
        }
        else if (!airlineCode.equals(other.airlineCode))
            return false;
        if (flightNumber == null) {
            if (other.flightNumber != null)
                return false;
        }
        else if (!flightNumber.equals(other.flightNumber))
            return false;
        if (flightOriginDate == null) {
            if (other.flightOriginDate != null)
                return false;
        }
        else if (!flightOriginDate.equals(other.flightOriginDate))
            return false;
        if (dcsFlightVersionNum == null) {
            if (other.dcsFlightVersionNum != null)
                return false;
        }
        else if (!dcsFlightVersionNum.equals(other.dcsFlightVersionNum))
            return false;
        if (airportFrom == null) {
            if (other.airportFrom != null)
                return false;
        }
        else if (!airportFrom.equals(other.airportFrom))
            return false;
        if (airportTo == null) {
            if (other.airportTo != null)
                return false;
        }
        else if (!airportTo.equals(other.airportTo))
            return false;
        if (internationalDomestic == null) {
            if (other.internationalDomestic != null)
                return false;
        }
        else if (!internationalDomestic.equals(other.internationalDomestic))
            return false;
        if (businessEventType == null) {
            if (other.businessEventType != null)
                return false;
        }
        else if (!businessEventType.equals(other.businessEventType))
            return false;
        if (businessEventCategory == null) {
            if (other.businessEventCategory != null)
                return false;
        }
        else if (!businessEventCategory.equals(other.businessEventCategory))
            return false;
        if (businessEventLegState == null) {
            if (other.businessEventLegState != null)
                return false;
        }
        else if (!businessEventLegState.equals(other.businessEventLegState))
            return false;
        if (businessEventMessageTime == null) {
            if (other.businessEventMessageTime != null)
                return false;
        }
        else if (!businessEventMessageTime.equals(other.businessEventMessageTime))
            return false;
        if (businessEventTime == null) {
            if (other.businessEventTime != null)
                return false;
        }
        else if (!businessEventTime.equals(other.businessEventTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.flightIdComposite == null) ? 0 : this.flightIdComposite.hashCode());
        result = prime * result + ((this.airlineCode == null) ? 0 : this.airlineCode.hashCode());
        result = prime * result + ((this.flightNumber == null) ? 0 : this.flightNumber.hashCode());
        result = prime * result + ((this.flightOriginDate == null) ? 0 : this.flightOriginDate.hashCode());
        result = prime * result + ((this.dcsFlightVersionNum == null) ? 0 : this.dcsFlightVersionNum.hashCode());
        result = prime * result + ((this.airportFrom == null) ? 0 : this.airportFrom.hashCode());
        result = prime * result + ((this.airportTo == null) ? 0 : this.airportTo.hashCode());
        result = prime * result + ((this.internationalDomestic == null) ? 0 : this.internationalDomestic.hashCode());
        result = prime * result + ((this.businessEventType == null) ? 0 : this.businessEventType.hashCode());
        result = prime * result + ((this.businessEventCategory == null) ? 0 : this.businessEventCategory.hashCode());
        result = prime * result + ((this.businessEventLegState == null) ? 0 : this.businessEventLegState.hashCode());
        result = prime * result + ((this.businessEventMessageTime == null) ? 0 : this.businessEventMessageTime.hashCode());
        result = prime * result + ((this.businessEventTime == null) ? 0 : this.businessEventTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Flight (");

        sb.append(flightIdComposite);
        sb.append(", ").append(airlineCode);
        sb.append(", ").append(flightNumber);
        sb.append(", ").append(flightOriginDate);
        sb.append(", ").append(dcsFlightVersionNum);
        sb.append(", ").append(airportFrom);
        sb.append(", ").append(airportTo);
        sb.append(", ").append(internationalDomestic);
        sb.append(", ").append(businessEventType);
        sb.append(", ").append(businessEventCategory);
        sb.append(", ").append(businessEventLegState);
        sb.append(", ").append(businessEventMessageTime);
        sb.append(", ").append(businessEventTime);

        sb.append(")");
        return sb.toString();
    }
}
