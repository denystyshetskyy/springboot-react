/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.dcsdb.model.tables.records;


import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;

import nz.co.airnz.svof.dcsdb.model.tables.Leg;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LegRecord extends UpdatableRecordImpl<LegRecord> {

    private static final long serialVersionUID = 1041664450;

    /**
     * Setter for <code>dcs.leg.flight_id_composite</code>.
     */
    public LegRecord setFlightIdComposite(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_id_composite</code>.
     */
    public String getFlightIdComposite() {
        return (String) get(0);
    }

    /**
     * Setter for <code>dcs.leg.airline_code</code>.
     */
    public LegRecord setAirlineCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.airline_code</code>.
     */
    public String getAirlineCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>dcs.leg.flight_number</code>.
     */
    public LegRecord setFlightNumber(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_number</code>.
     */
    public String getFlightNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>dcs.leg.flight_origin_date</code>. Per equivalent key attribute on Flight table
     */
    public LegRecord setFlightOriginDate(Date value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_origin_date</code>. Per equivalent key attribute on Flight table
     */
    public Date getFlightOriginDate() {
        return (Date) get(3);
    }

    /**
     * Setter for <code>dcs.leg.depart_airport_iata</code>.
     */
    public LegRecord setDepartAirportIata(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.depart_airport_iata</code>.
     */
    public String getDepartAirportIata() {
        return (String) get(4);
    }

    /**
     * Setter for <code>dcs.leg.dcs_flight_version_num</code>.
     */
    public LegRecord setDcsFlightVersionNum(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.dcs_flight_version_num</code>.
     */
    public Integer getDcsFlightVersionNum() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>dcs.leg.leg_seq_no</code>.
     */
    public LegRecord setLegSeqNo(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.leg_seq_no</code>.
     */
    public Integer getLegSeqNo() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>dcs.leg.action_code</code>. (blank)
     */
    public LegRecord setActionCode(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.action_code</code>. (blank)
     */
    public String getActionCode() {
        return (String) get(7);
    }

    /**
     * Setter for <code>dcs.leg.action_station</code>. (blank)
     */
    public LegRecord setActionStation(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.action_station</code>. (blank)
     */
    public String getActionStation() {
        return (String) get(8);
    }

    /**
     * Setter for <code>dcs.leg.agent_code</code>. (blank)
     */
    public LegRecord setAgentCode(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.agent_code</code>. (blank)
     */
    public String getAgentCode() {
        return (String) get(9);
    }

    /**
     * Setter for <code>dcs.leg.date_stamp</code>. (blank)
     */
    public LegRecord setDateStamp(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.date_stamp</code>. (blank)
     */
    public String getDateStamp() {
        return (String) get(10);
    }

    /**
     * Setter for <code>dcs.leg.set_address</code>. (blank)
     */
    public LegRecord setSetAddress(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.set_address</code>. (blank)
     */
    public String getSetAddress() {
        return (String) get(11);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_type_full</code>. Aircraft type is a 2/3/4-character alphanumeric code designating every aircraft type that may appear in flight planning. These codes are defined by the International Civil Aviation Organization (ICAO).
     */
    public LegRecord setAircraftTypeFull(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_type_full</code>. Aircraft type is a 2/3/4-character alphanumeric code designating every aircraft type that may appear in flight planning. These codes are defined by the International Civil Aviation Organization (ICAO).
     */
    public String getAircraftTypeFull() {
        return (String) get(12);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_config_code</code>. This character indicates the combination of classes and its corresponding seats to be used in this flight.
     */
    public LegRecord setAircraftConfigCode(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_config_code</code>. This character indicates the combination of classes and its corresponding seats to be used in this flight.
     */
    public String getAircraftConfigCode() {
        return (String) get(13);
    }

    /**
     * Setter for <code>dcs.leg.airport_from</code>. Flight departs from this airport.
     */
    public LegRecord setAirportFrom(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.airport_from</code>. Flight departs from this airport.
     */
    public String getAirportFrom() {
        return (String) get(14);
    }

    /**
     * Setter for <code>dcs.leg.time_stamp</code>. (blank)
     */
    public LegRecord setTimeStamp(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.time_stamp</code>. (blank)
     */
    public String getTimeStamp() {
        return (String) get(15);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_reg_country</code>. The aircraft registration country code
     */
    public LegRecord setAircraftRegCountry(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_reg_country</code>. The aircraft registration country code
     */
    public String getAircraftRegCountry() {
        return (String) get(16);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_version</code>. This field is an extension of the Aircraft Configuration Code, where it shows the actual classes and the number of seats in it.
     */
    public LegRecord setAircraftVersion(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_version</code>. This field is an extension of the Aircraft Configuration Code, where it shows the actual classes and the number of seats in it.
     */
    public String getAircraftVersion() {
        return (String) get(17);
    }

    /**
     * Setter for <code>dcs.leg.airport_to</code>. Flight arrives into this airport.
     */
    public LegRecord setAirportTo(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.airport_to</code>. Flight arrives into this airport.
     */
    public String getAirportTo() {
        return (String) get(18);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_registration</code>. This is a concatenation of the aircraft registration country code plus the tail number. The National Aviation Authority (NAA) allocates a unique alphanumeric string to identify the aircraft, which also indicates the nationality (i.e., country of registration) of the aircraft, and provides a legal document called a Certificate of Registration, one of the documents which must be carried when the aircraft is in operation.
     */
    public LegRecord setAircraftRegistration(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_registration</code>. This is a concatenation of the aircraft registration country code plus the tail number. The National Aviation Authority (NAA) allocates a unique alphanumeric string to identify the aircraft, which also indicates the nationality (i.e., country of registration) of the aircraft, and provides a legal document called a Certificate of Registration, one of the documents which must be carried when the aircraft is in operation.
     */
    public String getAircraftRegistration() {
        return (String) get(19);
    }

    /**
     * Setter for <code>dcs.leg.api_arrival_reqd</code>. Indicates if Advance Passenger Information (API) for Arrival is required or not.
     */
    public LegRecord setApiArrivalReqd(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.api_arrival_reqd</code>. Indicates if Advance Passenger Information (API) for Arrival is required or not.
     */
    public String getApiArrivalReqd() {
        return (String) get(20);
    }

    /**
     * Setter for <code>dcs.leg.aircraft_type_3_char</code>. (blank)
     */
    public LegRecord setAircraftType_3Char(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aircraft_type_3_char</code>. (blank)
     */
    public String getAircraftType_3Char() {
        return (String) get(21);
    }

    /**
     * Setter for <code>dcs.leg.api_arrival_sent</code>. Indicates if Advance Passenger Information (API) for Arrival is sent or not.
     */
    public LegRecord setApiArrivalSent(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.api_arrival_sent</code>. Indicates if Advance Passenger Information (API) for Arrival is sent or not.
     */
    public String getApiArrivalSent() {
        return (String) get(22);
    }

    /**
     * Setter for <code>dcs.leg.api_departure_reqd</code>. Indicates if Advance Passenger Information (API) for Departure is required or not.
     */
    public LegRecord setApiDepartureReqd(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.api_departure_reqd</code>. Indicates if Advance Passenger Information (API) for Departure is required or not.
     */
    public String getApiDepartureReqd() {
        return (String) get(23);
    }

    /**
     * Setter for <code>dcs.leg.api_departure_sent</code>. Indicates if Advance Passenger Information (API) for Departure is sent or not.
     */
    public LegRecord setApiDepartureSent(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.api_departure_sent</code>. Indicates if Advance Passenger Information (API) for Departure is sent or not.
     */
    public String getApiDepartureSent() {
        return (String) get(24);
    }

    /**
     * Setter for <code>dcs.leg.apis_sent</code>. SG/Peter ??? Items 42-45 are in MFT and item 46 is in CTL, are they same or different ?
     */
    public LegRecord setApisSent(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.apis_sent</code>. SG/Peter ??? Items 42-45 are in MFT and item 46 is in CTL, are they same or different ?
     */
    public String getApisSent() {
        return (String) get(25);
    }

    /**
     * Setter for <code>dcs.leg.app_arrival_reqd</code>. Advance Passenger Processing (APP) for Arrival (Australia, NZ, etc. PAX pre-screening program)
     */
    public LegRecord setAppArrivalReqd(String value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.app_arrival_reqd</code>. Advance Passenger Processing (APP) for Arrival (Australia, NZ, etc. PAX pre-screening program)
     */
    public String getAppArrivalReqd() {
        return (String) get(26);
    }

    /**
     * Setter for <code>dcs.leg.app_departure_reqd</code>. Advance Passenger Processing (APP) for Departure (Australia, NZ, etc. PAX pre-screening program)
     */
    public LegRecord setAppDepartureReqd(String value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.app_departure_reqd</code>. Advance Passenger Processing (APP) for Departure (Australia, NZ, etc. PAX pre-screening program)
     */
    public String getAppDepartureReqd() {
        return (String) get(27);
    }

    /**
     * Setter for <code>dcs.leg.aqq_arrival_reqd</code>. APIS Quick Query (AQQ) for Arrival (US PAX pre-screening program)
     */
    public LegRecord setAqqArrivalReqd(String value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aqq_arrival_reqd</code>. APIS Quick Query (AQQ) for Arrival (US PAX pre-screening program)
     */
    public String getAqqArrivalReqd() {
        return (String) get(28);
    }

    /**
     * Setter for <code>dcs.leg.aqq_departure_reqd</code>. APIS Quick Query (AQQ) for Departure (US PAX pre-screening program)
     */
    public LegRecord setAqqDepartureReqd(String value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aqq_departure_reqd</code>. APIS Quick Query (AQQ) for Departure (US PAX pre-screening program)
     */
    public String getAqqDepartureReqd() {
        return (String) get(29);
    }

    /**
     * Setter for <code>dcs.leg.aqq_flight_cancel_complete</code>. Indicates AQQ flight Cancelled message sent to SITA for flights to and from the USA and GBR.
     */
    public LegRecord setAqqFlightCancelComplete(String value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aqq_flight_cancel_complete</code>. Indicates AQQ flight Cancelled message sent to SITA for flights to and from the USA and GBR.
     */
    public String getAqqFlightCancelComplete() {
        return (String) get(30);
    }

    /**
     * Setter for <code>dcs.leg.aqq_flight_close_complete</code>. Indicates AQQ flight Close message sent to SITA for flights to and from the USA and GBR.
     */
    public LegRecord setAqqFlightCloseComplete(String value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.aqq_flight_close_complete</code>. Indicates AQQ flight Close message sent to SITA for flights to and from the USA and GBR.
     */
    public String getAqqFlightCloseComplete() {
        return (String) get(31);
    }

    /**
     * Setter for <code>dcs.leg.auto_doc_check_adc_active</code>. Pre-check PAX documents during Web and Mobile check-in
     */
    public LegRecord setAutoDocCheckAdcActive(String value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.auto_doc_check_adc_active</code>. Pre-check PAX documents during Web and Mobile check-in
     */
    public String getAutoDocCheckAdcActive() {
        return (String) get(32);
    }

    /**
     * Setter for <code>dcs.leg.auto_regrade_indicator</code>. Indicates if any PAX with a V-edit (Alternate class) or staff with an upgradeable category will be accepted into the desired class providing there are seats available in that class.
     */
    public LegRecord setAutoRegradeIndicator(String value) {
        set(33, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.auto_regrade_indicator</code>. Indicates if any PAX with a V-edit (Alternate class) or staff with an upgradeable category will be accepted into the desired class providing there are seats available in that class.
     */
    public String getAutoRegradeIndicator() {
        return (String) get(33);
    }

    /**
     * Setter for <code>dcs.leg.baggage_by_piece_reqd</code>. This is the requirements of the carrier for weight and balance calculations, and determines what entries are required by the check-in agents.  Number of pieces of checked baggage / The weight of checked baggage / The weight of hand baggage / Blank means standard baggage weight per passenger.
     */
    public LegRecord setBaggageByPieceReqd(String value) {
        set(34, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.baggage_by_piece_reqd</code>. This is the requirements of the carrier for weight and balance calculations, and determines what entries are required by the check-in agents.  Number of pieces of checked baggage / The weight of checked baggage / The weight of hand baggage / Blank means standard baggage weight per passenger.
     */
    public String getBaggageByPieceReqd() {
        return (String) get(34);
    }

    /**
     * Setter for <code>dcs.leg.baggage_by_weight_reqd</code>. (blank)
     */
    public LegRecord setBaggageByWeightReqd(String value) {
        set(35, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.baggage_by_weight_reqd</code>. (blank)
     */
    public String getBaggageByWeightReqd() {
        return (String) get(35);
    }

    /**
     * Setter for <code>dcs.leg.baggage_chute_num_on_bag_tag</code>. Indicates if the Baggage Chute number is printed on Bag Tags or not.
     */
    public LegRecord setBaggageChuteNumOnBagTag(String value) {
        set(36, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.baggage_chute_num_on_bag_tag</code>. Indicates if the Baggage Chute number is printed on Bag Tags or not.
     */
    public String getBaggageChuteNumOnBagTag() {
        return (String) get(36);
    }

    /**
     * Setter for <code>dcs.leg.baggage_transfer_msg_prod_t</code>. Indicates if Baggage Transfer Message is produced or not.
     */
    public LegRecord setBaggageTransferMsgProdT(String value) {
        set(37, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.baggage_transfer_msg_prod_t</code>. Indicates if Baggage Transfer Message is produced or not.
     */
    public String getBaggageTransferMsgProdT() {
        return (String) get(37);
    }

    /**
     * Setter for <code>dcs.leg.baggage_transfer_msg_reqd_t</code>. Indicates if Baggage Transfer Message is required or not.
     */
    public LegRecord setBaggageTransferMsgReqdT(String value) {
        set(38, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.baggage_transfer_msg_reqd_t</code>. Indicates if Baggage Transfer Message is required or not.
     */
    public String getBaggageTransferMsgReqdT() {
        return (String) get(38);
    }

    /**
     * Setter for <code>dcs.leg.boarding_start_time</code>. The time in minutes, when boarding starts before scheduled departure of flight.
     */
    public LegRecord setBoardingStartTime(Integer value) {
        set(39, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.boarding_start_time</code>. The time in minutes, when boarding starts before scheduled departure of flight.
     */
    public Integer getBoardingStartTime() {
        return (Integer) get(39);
    }

    /**
     * Setter for <code>dcs.leg.cancel_landing_at_a_destn</code>. Indicates if the landing is cancelled at a destination.
     */
    public LegRecord setCancelLandingAtADestn(String value) {
        set(40, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.cancel_landing_at_a_destn</code>. Indicates if the landing is cancelled at a destination.
     */
    public String getCancelLandingAtADestn() {
        return (String) get(40);
    }

    /**
     * Setter for <code>dcs.leg.cbsa_arrival_reqd</code>. Canada Border Services Agency (CBSA) for Arrival
     */
    public LegRecord setCbsaArrivalReqd(String value) {
        set(41, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.cbsa_arrival_reqd</code>. Canada Border Services Agency (CBSA) for Arrival
     */
    public String getCbsaArrivalReqd() {
        return (String) get(41);
    }

    /**
     * Setter for <code>dcs.leg.cbsa_departure_reqd</code>. Canada Border Services Agency (CBSA) for Departure
     */
    public LegRecord setCbsaDepartureReqd(String value) {
        set(42, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.cbsa_departure_reqd</code>. Canada Border Services Agency (CBSA) for Departure
     */
    public String getCbsaDepartureReqd() {
        return (String) get(42);
    }

    /**
     * Setter for <code>dcs.leg.charter_flight</code>. Indicates a flight by an aircraft chartered for a specific journey, not part of an airline's regular schedule.
     */
    public LegRecord setCharterFlight(String value) {
        set(43, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.charter_flight</code>. Indicates a flight by an aircraft chartered for a specific journey, not part of an airline's regular schedule.
     */
    public String getCharterFlight() {
        return (String) get(43);
    }

    /**
     * Setter for <code>dcs.leg.check_in_option_indicator</code>. Three options for the type of check in that is required for a specific flight: OPTION 1: Numeric type check-in. OPTION 2: Each PAX to be identified by name. NOREC OPTION: The norec option check in will accept passengers holding OK tickets on a first come, first served basis. This is similar to Option 1 check in method except that name identification is required.
     */
    public LegRecord setCheckInOptionIndicator(String value) {
        set(44, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.check_in_option_indicator</code>. Three options for the type of check in that is required for a specific flight: OPTION 1: Numeric type check-in. OPTION 2: Each PAX to be identified by name. NOREC OPTION: The norec option check in will accept passengers holding OK tickets on a first come, first served basis. This is similar to Option 1 check in method except that name identification is required.
     */
    public String getCheckInOptionIndicator() {
        return (String) get(44);
    }

    /**
     * Setter for <code>dcs.leg.cholera_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Cholera certificate for the destination.
     */
    public LegRecord setCholeraCertificateReqd(String value) {
        set(45, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.cholera_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Cholera certificate for the destination.
     */
    public String getCholeraCertificateReqd() {
        return (String) get(45);
    }

    /**
     * Setter for <code>dcs.leg.codeshare_flight_numbers</code>. Contains the list of all flight numbers that has a codeshare agreement in this flight.
     */
    public LegRecord setCodeshareFlightNumbers(String value) {
        set(46, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.codeshare_flight_numbers</code>. Contains the list of all flight numbers that has a codeshare agreement in this flight.
     */
    public String getCodeshareFlightNumbers() {
        return (String) get(46);
    }

    /**
     * Setter for <code>dcs.leg.crew_code</code>. This character indicates the combination of cockpit and cabin crew to be operated on this flight.
     */
    public LegRecord setCrewCode(String value) {
        set(47, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.crew_code</code>. This character indicates the combination of cockpit and cabin crew to be operated on this flight.
     */
    public String getCrewCode() {
        return (String) get(47);
    }

    /**
     * Setter for <code>dcs.leg.document_airline_code</code>. Used during old times, for an internal purpose to store another flight number, in cases like, where a multi-leg flight flew one leg with one equipment and the  other leg with another equipment, but the flight number remained the same. Whereas, DCS tracked them differently using these fields.
     */
    public LegRecord setDocumentAirlineCode(String value) {
        set(48, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.document_airline_code</code>. Used during old times, for an internal purpose to store another flight number, in cases like, where a multi-leg flight flew one leg with one equipment and the  other leg with another equipment, but the flight number remained the same. Whereas, DCS tracked them differently using these fields.
     */
    public String getDocumentAirlineCode() {
        return (String) get(48);
    }

    /**
     * Setter for <code>dcs.leg.document_flight_number</code>. (blank)
     */
    public LegRecord setDocumentFlightNumber(String value) {
        set(49, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.document_flight_number</code>. (blank)
     */
    public String getDocumentFlightNumber() {
        return (String) get(49);
    }

    /**
     * Setter for <code>dcs.leg.estimated_departure_time</code>. A flight leg's estimated local time of departure from an airport.
     */
    public LegRecord setEstimatedDepartureTime(String value) {
        set(50, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.estimated_departure_time</code>. A flight leg's estimated local time of departure from an airport.
     */
    public String getEstimatedDepartureTime() {
        return (String) get(50);
    }

    /**
     * Setter for <code>dcs.leg.excess_bags_restricted</code>. Indicates whether Excess Baggages can be accepted or not out of this station.
     */
    public LegRecord setExcessBagsRestricted(String value) {
        set(51, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.excess_bags_restricted</code>. Indicates whether Excess Baggages can be accepted or not out of this station.
     */
    public String getExcessBagsRestricted() {
        return (String) get(51);
    }

    /**
     * Setter for <code>dcs.leg.fast_track_active</code>. Indicates that Fast Track facility (where a PAX can go thru a special fast lane of Immigration/Security with the help of an indicator in the Boarding Pass) is active at this station or not.
     */
    public LegRecord setFastTrackActive(String value) {
        set(52, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.fast_track_active</code>. Indicates that Fast Track facility (where a PAX can go thru a special fast lane of Immigration/Security with the help of an indicator in the Boarding Pass) is active at this station or not.
     */
    public String getFastTrackActive() {
        return (String) get(52);
    }

    /**
     * Setter for <code>dcs.leg.flight_for_demo_purpose</code>. Indicates if a flight is being used for a demonstration purpose.
     */
    public LegRecord setFlightForDemoPurpose(String value) {
        set(53, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_for_demo_purpose</code>. Indicates if a flight is being used for a demonstration purpose.
     */
    public String getFlightForDemoPurpose() {
        return (String) get(53);
    }

    /**
     * Setter for <code>dcs.leg.flight_in_disrupt_status</code>. Indicates whether a scheduled flight is disrupted or not.
     */
    public LegRecord setFlightInDisruptStatus(String value) {
        set(54, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_in_disrupt_status</code>. Indicates whether a scheduled flight is disrupted or not.
     */
    public String getFlightInDisruptStatus() {
        return (String) get(54);
    }

    /**
     * Setter for <code>dcs.leg.flight_status</code>. Indicates the current status of a flight, like FE, FO, FH, FC, FF, etc.
     */
    public LegRecord setFlightStatus(String value) {
        set(55, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_status</code>. Indicates the current status of a flight, like FE, FO, FH, FC, FF, etc.
     */
    public String getFlightStatus() {
        return (String) get(55);
    }

    /**
     * Setter for <code>dcs.leg.flight_type</code>. Type-0 = Reservation controlled flight, Type-1 = Non-Reservation controlled flight
     */
    public LegRecord setFlightType(Integer value) {
        set(56, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.flight_type</code>. Type-0 = Reservation controlled flight, Type-1 = Non-Reservation controlled flight
     */
    public Integer getFlightType() {
        return (Integer) get(56);
    }

    /**
     * Setter for <code>dcs.leg.fom_sent</code>. Flight Open Message (FOM) is sent to the Baggage Reconciliation System to open flight for baggage messages, when the flight is opened in DCS.
     */
    public LegRecord setFomSent(String value) {
        set(57, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.fom_sent</code>. Flight Open Message (FOM) is sent to the Baggage Reconciliation System to open flight for baggage messages, when the flight is opened in DCS.
     */
    public String getFomSent() {
        return (String) get(57);
    }

    /**
     * Setter for <code>dcs.leg.freq_traveller_list_prod_f</code>. Indicates if Frequent Traveller List message is produced or not.
     */
    public LegRecord setFreqTravellerListProdF(String value) {
        set(58, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.freq_traveller_list_prod_f</code>. Indicates if Frequent Traveller List message is produced or not.
     */
    public String getFreqTravellerListProdF() {
        return (String) get(58);
    }

    /**
     * Setter for <code>dcs.leg.freq_traveller_list_reqd_f</code>. Indicates if Frequent Traveller List message is required or not.
     */
    public LegRecord setFreqTravellerListReqdF(String value) {
        set(59, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.freq_traveller_list_reqd_f</code>. Indicates if Frequent Traveller List message is required or not.
     */
    public String getFreqTravellerListReqdF() {
        return (String) get(59);
    }

    /**
     * Setter for <code>dcs.leg.ftl_sent</code>. IATA Frequent Traveller List (FTL) message
     */
    public LegRecord setFtlSent(String value) {
        set(60, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.ftl_sent</code>. IATA Frequent Traveller List (FTL) message
     */
    public String getFtlSent() {
        return (String) get(60);
    }

    /**
     * Setter for <code>dcs.leg.full_name_checkin_reqd</code>. Indicates if PAX full names are required or not for check-in.
     */
    public LegRecord setFullNameCheckinReqd(String value) {
        set(61, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.full_name_checkin_reqd</code>. Indicates if PAX full names are required or not for check-in.
     */
    public String getFullNameCheckinReqd() {
        return (String) get(61);
    }

    /**
     * Setter for <code>dcs.leg.fx_entry_time_stamp</code>. FX action code is to cancel all incomplete check-in entries to allow flight closure to proceed.
     */
    public LegRecord setFxEntryTimeStamp(Integer value) {
        set(62, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.fx_entry_time_stamp</code>. FX action code is to cancel all incomplete check-in entries to allow flight closure to proceed.
     */
    public Integer getFxEntryTimeStamp() {
        return (Integer) get(62);
    }

    /**
     * Setter for <code>dcs.leg.gate_number</code>. The gate number through which all PAX have to board the aircraft.
     */
    public LegRecord setGateNumber(String value) {
        set(63, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.gate_number</code>. The gate number through which all PAX have to board the aircraft.
     */
    public String getGateNumber() {
        return (String) get(63);
    }

    /**
     * Setter for <code>dcs.leg.hand_baggage_weight_reqd</code>. (blank)
     */
    public LegRecord setHandBaggageWeightReqd(String value) {
        set(64, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.hand_baggage_weight_reqd</code>. (blank)
     */
    public String getHandBaggageWeightReqd() {
        return (String) get(64);
    }

    /**
     * Setter for <code>dcs.leg.handback_msg_prod_b</code>. Indicates if Handback is produced or not.
     */
    public LegRecord setHandbackMsgProdB(String value) {
        set(65, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.handback_msg_prod_b</code>. Indicates if Handback is produced or not.
     */
    public String getHandbackMsgProdB() {
        return (String) get(65);
    }

    /**
     * Setter for <code>dcs.leg.handback_msg_reqd_b</code>. Indicates if Handback (list of PAX to RES office, whose reservation status has changed due to DCS transactions.) is required or not.
     */
    public LegRecord setHandbackMsgReqdB(String value) {
        set(66, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.handback_msg_reqd_b</code>. Indicates if Handback (list of PAX to RES office, whose reservation status has changed due to DCS transactions.) is required or not.
     */
    public String getHandbackMsgReqdB() {
        return (String) get(66);
    }

    /**
     * Setter for <code>dcs.leg.hb_sent</code>. Handback Message will contain details of PAX, whose reservation status has changed due to DCS transactions.
     */
    public LegRecord setHbSent(String value) {
        set(67, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.hb_sent</code>. Handback Message will contain details of PAX, whose reservation status has changed due to DCS transactions.
     */
    public String getHbSent() {
        return (String) get(67);
    }

    /**
     * Setter for <code>dcs.leg.idm_sent</code>. Industry Discount Message (IDM) will contain details of Rebate/Staff PAX transiting through the next downline stations.
     */
    public LegRecord setIdmSent(String value) {
        set(68, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.idm_sent</code>. Industry Discount Message (IDM) will contain details of Rebate/Staff PAX transiting through the next downline stations.
     */
    public String getIdmSent() {
        return (String) get(68);
    }

    /**
     * Setter for <code>dcs.leg.idm_subload_prod_i</code>. Indicates if Industry Discount Message is produced or not.
     */
    public LegRecord setIdmSubloadProdI(String value) {
        set(69, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.idm_subload_prod_i</code>. Indicates if Industry Discount Message is produced or not.
     */
    public String getIdmSubloadProdI() {
        return (String) get(69);
    }

    /**
     * Setter for <code>dcs.leg.idm_subload_reqd_i</code>. Indicates if Industry Discount Message (list of Rebate/Staff PAX transiting through the next downline stations) is required or not.
     */
    public LegRecord setIdmSubloadReqdI(String value) {
        set(70, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.idm_subload_reqd_i</code>. Indicates if Industry Discount Message (list of Rebate/Staff PAX transiting through the next downline stations) is required or not.
     */
    public String getIdmSubloadReqdI() {
        return (String) get(70);
    }

    /**
     * Setter for <code>dcs.leg.is_codeshare</code>. Indicates if a flight is in codeshare. Codeshare is an aviation business arrangement, where one airline puts its airline code and flight number on a flight operated by another airline.
     */
    public LegRecord setIsCodeshare(String value) {
        set(71, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.is_codeshare</code>. Indicates if a flight is in codeshare. Codeshare is an aviation business arrangement, where one airline puts its airline code and flight number on a flight operated by another airline.
     */
    public String getIsCodeshare() {
        return (String) get(71);
    }

    /**
     * Setter for <code>dcs.leg.load_signal_prod_l</code>. Indicates if Load Distribution Message is produced or not.
     */
    public LegRecord setLoadSignalProdL(String value) {
        set(72, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.load_signal_prod_l</code>. Indicates if Load Distribution Message is produced or not.
     */
    public String getLoadSignalProdL() {
        return (String) get(72);
    }

    /**
     * Setter for <code>dcs.leg.load_signal_reqd_l</code>. Indicates if Load Distribution Message (used to communicate with the transit station to describe the cargo load) is required or not.
     */
    public LegRecord setLoadSignalReqdL(String value) {
        set(73, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.load_signal_reqd_l</code>. Indicates if Load Distribution Message (used to communicate with the transit station to describe the cargo load) is required or not.
     */
    public String getLoadSignalReqdL() {
        return (String) get(73);
    }

    /**
     * Setter for <code>dcs.leg.mask_code</code>. The Mask Code will indicate the basic seating logic in the aircraft, to allocate seats by row rather than cabin area. Usage will vary with different aircraft types.
     */
    public LegRecord setMaskCode(String value) {
        set(74, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.mask_code</code>. The Mask Code will indicate the basic seating logic in the aircraft, to allocate seats by row rather than cabin area. Usage will vary with different aircraft types.
     */
    public String getMaskCode() {
        return (String) get(74);
    }

    /**
     * Setter for <code>dcs.leg.matariki_tasman_flight</code>. Indicates if a flight is an International short haul, like flights to Australia and Pacific Islands.
     */
    public LegRecord setMatarikiTasmanFlight(String value) {
        set(75, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.matariki_tasman_flight</code>. Indicates if a flight is an International short haul, like flights to Australia and Pacific Islands.
     */
    public String getMatarikiTasmanFlight() {
        return (String) get(75);
    }

    /**
     * Setter for <code>dcs.leg.mrktng_flght_on_bpass_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Boarding Passes
     */
    public LegRecord setMrktngFlghtOnBpassFlag(String value) {
        set(76, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.mrktng_flght_on_bpass_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Boarding Passes
     */
    public String getMrktngFlghtOnBpassFlag() {
        return (String) get(76);
    }

    /**
     * Setter for <code>dcs.leg.mrktng_flight_on_bagtag_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Bag Tags
     */
    public LegRecord setMrktngFlightOnBagtagFlag(String value) {
        set(77, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.mrktng_flight_on_bagtag_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Bag Tags
     */
    public String getMrktngFlightOnBagtagFlag() {
        return (String) get(77);
    }

    /**
     * Setter for <code>dcs.leg.mvt_sent</code>. To despatch IATA format Aircraft Movement Message (MVT), like Departure/Arrival/Delay/Diversion/etc., to appropriate addresses.
     */
    public LegRecord setMvtSent(String value) {
        set(78, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.mvt_sent</code>. To despatch IATA format Aircraft Movement Message (MVT), like Departure/Arrival/Delay/Diversion/etc., to appropriate addresses.
     */
    public String getMvtSent() {
        return (String) get(78);
    }

    /**
     * Setter for <code>dcs.leg.operating_cabin_crew_count</code>. Total count of cabin crew members
     */
    public LegRecord setOperatingCabinCrewCount(Integer value) {
        set(79, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.operating_cabin_crew_count</code>. Total count of cabin crew members
     */
    public Integer getOperatingCabinCrewCount() {
        return (Integer) get(79);
    }

    /**
     * Setter for <code>dcs.leg.operating_tech_crew_count</code>. Total count of cockpit crew members
     */
    public LegRecord setOperatingTechCrewCount(Integer value) {
        set(80, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.operating_tech_crew_count</code>. Total count of cockpit crew members
     */
    public Integer getOperatingTechCrewCount() {
        return (Integer) get(80);
    }

    /**
     * Setter for <code>dcs.leg.orig_airline_code</code>. If this is a disrupted flight, then this field has the original airline code.
     */
    public LegRecord setOrigAirlineCode(String value) {
        set(81, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.orig_airline_code</code>. If this is a disrupted flight, then this field has the original airline code.
     */
    public String getOrigAirlineCode() {
        return (String) get(81);
    }

    /**
     * Setter for <code>dcs.leg.orig_flight_last_vrsn_num</code>. If this is a disrupted flight, then this field has the original flight's last version number.
     */
    public LegRecord setOrigFlightLastVrsnNum(Integer value) {
        set(82, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.orig_flight_last_vrsn_num</code>. If this is a disrupted flight, then this field has the original flight's last version number.
     */
    public Integer getOrigFlightLastVrsnNum() {
        return (Integer) get(82);
    }

    /**
     * Setter for <code>dcs.leg.orig_flight_number</code>. If this is a disrupted flight, then this field has the original flight number.
     */
    public LegRecord setOrigFlightNumber(String value) {
        set(83, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.orig_flight_number</code>. If this is a disrupted flight, then this field has the original flight number.
     */
    public String getOrigFlightNumber() {
        return (String) get(83);
    }

    /**
     * Setter for <code>dcs.leg.orig_flight_origin_date</code>. If this is a disrupted flight, then this field has the original flight origin date.
     */
    public LegRecord setOrigFlightOriginDate(Date value) {
        set(84, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.orig_flight_origin_date</code>. If this is a disrupted flight, then this field has the original flight origin date.
     */
    public Date getOrigFlightOriginDate() {
        return (Date) get(84);
    }

    /**
     * Setter for <code>dcs.leg.originator_transit_flight</code>. Indicates if the current departing station is an originating/transiting station for this flight.
     */
    public LegRecord setOriginatorTransitFlight(String value) {
        set(85, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.originator_transit_flight</code>. Indicates if the current departing station is an originating/transiting station for this flight.
     */
    public String getOriginatorTransitFlight() {
        return (String) get(85);
    }

    /**
     * Setter for <code>dcs.leg.pantry_code</code>. This character indicates the combination of pantry/meals to be used in this flight.
     */
    public LegRecord setPantryCode(String value) {
        set(86, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pantry_code</code>. This character indicates the combination of pantry/meals to be used in this flight.
     */
    public String getPantryCode() {
        return (String) get(86);
    }

    /**
     * Setter for <code>dcs.leg.pax_first_name_reqd</code>. Indicates if the PAX first name is required in PAX Manifest.
     */
    public LegRecord setPaxFirstNameReqd(String value) {
        set(87, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_first_name_reqd</code>. Indicates if the PAX first name is required in PAX Manifest.
     */
    public String getPaxFirstNameReqd() {
        return (String) get(87);
    }

    /**
     * Setter for <code>dcs.leg.pax_initials_reqd</code>. Indicates if the PAX initials are required in PAX Manifest.
     */
    public LegRecord setPaxInitialsReqd(String value) {
        set(88, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_initials_reqd</code>. Indicates if the PAX initials are required in PAX Manifest.
     */
    public String getPaxInitialsReqd() {
        return (String) get(88);
    }

    /**
     * Setter for <code>dcs.leg.pax_manifest_prod_m</code>. Indicates if PAX Manifest is produced or not.
     */
    public LegRecord setPaxManifestProdM(String value) {
        set(89, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_manifest_prod_m</code>. Indicates if PAX Manifest is produced or not.
     */
    public String getPaxManifestProdM() {
        return (String) get(89);
    }

    /**
     * Setter for <code>dcs.leg.pax_manifest_reqd_m</code>. Indicates if PAX Manifest (list of PAX of an aircraft for the use of customs and other officials) is required or not.
     */
    public LegRecord setPaxManifestReqdM(String value) {
        set(90, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_manifest_reqd_m</code>. Indicates if PAX Manifest (list of PAX of an aircraft for the use of customs and other officials) is required or not.
     */
    public String getPaxManifestReqdM() {
        return (String) get(90);
    }

    /**
     * Setter for <code>dcs.leg.pax_names_tranfrd</code>. PAX Names (PN) transfer from RES to DCS will be done only once. Can be done twice. RGF Note - also referred to as PN Done?
     */
    public LegRecord setPaxNamesTranfrd(String value) {
        set(91, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_names_tranfrd</code>. PAX Names (PN) transfer from RES to DCS will be done only once. Can be done twice. RGF Note - also referred to as PN Done?
     */
    public String getPaxNamesTranfrd() {
        return (String) get(91);
    }

    /**
     * Setter for <code>dcs.leg.pax_service_msg_prod_h</code>. Indicates if Passenger Service Message is produced or not.
     */
    public LegRecord setPaxServiceMsgProdH(String value) {
        set(92, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_service_msg_prod_h</code>. Indicates if Passenger Service Message is produced or not.
     */
    public String getPaxServiceMsgProdH() {
        return (String) get(92);
    }

    /**
     * Setter for <code>dcs.leg.pax_service_msg_reqd_h</code>. Indicates if Passenger Service Message (list of PAX who require special handling) is required or not.
     */
    public LegRecord setPaxServiceMsgReqdH(String value) {
        set(93, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pax_service_msg_reqd_h</code>. Indicates if Passenger Service Message (list of PAX who require special handling) is required or not.
     */
    public String getPaxServiceMsgReqdH() {
        return (String) get(93);
    }

    /**
     * Setter for <code>dcs.leg.pnl_codeshare_pax_created</code>. Indicates the processing of Passenger Name List (PNL) of a Type-1 flight
     */
    public LegRecord setPnlCodesharePaxCreated(String value) {
        set(94, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pnl_codeshare_pax_created</code>. Indicates the processing of Passenger Name List (PNL) of a Type-1 flight
     */
    public String getPnlCodesharePaxCreated() {
        return (String) get(94);
    }

    /**
     * Setter for <code>dcs.leg.pnl_expected_this_flight</code>. If it's a Type-1 Flight, then a PAX Name List (PNL) is expected from the other airline into our DCS system.
     */
    public LegRecord setPnlExpectedThisFlight(String value) {
        set(95, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.pnl_expected_this_flight</code>. If it's a Type-1 Flight, then a PAX Name List (PNL) is expected from the other airline into our DCS system.
     */
    public String getPnlExpectedThisFlight() {
        return (String) get(95);
    }

    /**
     * Setter for <code>dcs.leg.prevent_seat_changes</code>. Indicates the prevention of seat changes by check-in staff for these classes.
     */
    public LegRecord setPreventSeatChanges(String value) {
        set(96, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.prevent_seat_changes</code>. Indicates the prevention of seat changes by check-in staff for these classes.
     */
    public String getPreventSeatChanges() {
        return (String) get(96);
    }

    /**
     * Setter for <code>dcs.leg.prl_shootback_prod</code>. Passenger Reconcile List (PRL) is to provide RES with all PAX check-in details for actual boarded PAX of a flight departure.
     */
    public LegRecord setPrlShootbackProd(String value) {
        set(97, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.prl_shootback_prod</code>. Passenger Reconcile List (PRL) is to provide RES with all PAX check-in details for actual boarded PAX of a flight departure.
     */
    public String getPrlShootbackProd() {
        return (String) get(97);
    }

    /**
     * Setter for <code>dcs.leg.psm_sent</code>. Passenger Service Message (PSM) will contain details of PAX who require special handling, like unaccompanied minors, passengers with infants, etc.
     */
    public LegRecord setPsmSent(String value) {
        set(98, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.psm_sent</code>. Passenger Service Message (PSM) will contain details of PAX who require special handling, like unaccompanied minors, passengers with infants, etc.
     */
    public String getPsmSent() {
        return (String) get(98);
    }

    /**
     * Setter for <code>dcs.leg.ptm_pax_disembarking_prod_d</code>. Indicates if PAX Transfer Message is produced or not.
     */
    public LegRecord setPtmPaxDisembarkingProdD(String value) {
        set(99, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.ptm_pax_disembarking_prod_d</code>. Indicates if PAX Transfer Message is produced or not.
     */
    public String getPtmPaxDisembarkingProdD() {
        return (String) get(99);
    }

    /**
     * Setter for <code>dcs.leg.ptm_pax_disembarking_reqd_d</code>. Indicates if PAX Transfer Message (list of PAX transiting through the next downline stations) is required or not.
     */
    public LegRecord setPtmPaxDisembarkingReqdD(String value) {
        set(100, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.ptm_pax_disembarking_reqd_d</code>. Indicates if PAX Transfer Message (list of PAX transiting through the next downline stations) is required or not.
     */
    public String getPtmPaxDisembarkingReqdD() {
        return (String) get(100);
    }

    /**
     * Setter for <code>dcs.leg.replace_destination</code>. Indicates if the original destination is replaced by another one.
     */
    public LegRecord setReplaceDestination(String value) {
        set(101, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.replace_destination</code>. Indicates if the original destination is replaced by another one.
     */
    public String getReplaceDestination() {
        return (String) get(101);
    }

    /**
     * Setter for <code>dcs.leg.schd_arrival_date</code>. A flight leg's scheduled local date of arrival into an airport.
     */
    public LegRecord setSchdArrivalDate(Timestamp value) {
        set(102, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.schd_arrival_date</code>. A flight leg's scheduled local date of arrival into an airport.
     */
    public Timestamp getSchdArrivalDate() {
        return (Timestamp) get(102);
    }

    /**
     * Setter for <code>dcs.leg.schd_arrival_time</code>. A flight leg's scheduled local time of arrival into an airport.
     */
    public LegRecord setSchdArrivalTime(String value) {
        set(103, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.schd_arrival_time</code>. A flight leg's scheduled local time of arrival into an airport.
     */
    public String getSchdArrivalTime() {
        return (String) get(103);
    }

    /**
     * Setter for <code>dcs.leg.schd_departure_time</code>. A flight leg's scheduled local time of departure from an airport.
     */
    public LegRecord setSchdDepartureTime(String value) {
        set(104, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.schd_departure_time</code>. A flight leg's scheduled local time of departure from an airport.
     */
    public String getSchdDepartureTime() {
        return (String) get(104);
    }

    /**
     * Setter for <code>dcs.leg.schd_leg_departure_date</code>. A flight leg's scheduled local date of departure from an airport.
     */
    public LegRecord setSchdLegDepartureDate(Timestamp value) {
        set(105, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.schd_leg_departure_date</code>. A flight leg's scheduled local date of departure from an airport.
     */
    public Timestamp getSchdLegDepartureDate() {
        return (Timestamp) get(105);
    }

    /**
     * Setter for <code>dcs.leg.seat_plan_prod_p</code>. Indicates if Seat Plan is produced or not.
     */
    public LegRecord setSeatPlanProdP(String value) {
        set(106, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.seat_plan_prod_p</code>. Indicates if Seat Plan is produced or not.
     */
    public String getSeatPlanProdP() {
        return (String) get(106);
    }

    /**
     * Setter for <code>dcs.leg.seat_plan_reqd_p</code>. Indicates if Seat Plan is required or not.
     */
    public LegRecord setSeatPlanReqdP(String value) {
        set(107, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.seat_plan_reqd_p</code>. Indicates if Seat Plan is required or not.
     */
    public String getSeatPlanReqdP() {
        return (String) get(107);
    }

    /**
     * Setter for <code>dcs.leg.seats_2_suit_flight</code>. With "Seats to Suit" you can select an experience that suits your needs and preferences, like Seat, Seat+Bag, The Works, Works Deluxe, Premium Economy, Business Premier.
     */
    public LegRecord setSeats_2SuitFlight(String value) {
        set(108, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.seats_2_suit_flight</code>. With "Seats to Suit" you can select an experience that suits your needs and preferences, like Seat, Seat+Bag, The Works, Works Deluxe, Premium Economy, Business Premier.
     */
    public String getSeats_2SuitFlight() {
        return (String) get(108);
    }

    /**
     * Setter for <code>dcs.leg.seats_occupd_signal_reqd_o</code>. Indicates if Seats Occupied Message (to inform the next downline station of seats occupied by transit PAX or seats protected for downline boarding) is required or not.
     */
    public LegRecord setSeatsOccupdSignalReqdO(String value) {
        set(109, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.seats_occupd_signal_reqd_o</code>. Indicates if Seats Occupied Message (to inform the next downline station of seats occupied by transit PAX or seats protected for downline boarding) is required or not.
     */
    public String getSeatsOccupdSignalReqdO() {
        return (String) get(109);
    }

    /**
     * Setter for <code>dcs.leg.seats_occupd_signl_prod_o</code>. Indicates if Seats Occupied Message is produced or not.
     */
    public LegRecord setSeatsOccupdSignlProdO(String value) {
        set(110, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.seats_occupd_signl_prod_o</code>. Indicates if Seats Occupied Message is produced or not.
     */
    public String getSeatsOccupdSignlProdO() {
        return (String) get(110);
    }

    /**
     * Setter for <code>dcs.leg.secure_flight_arrival_reqd</code>. US PAX pre-screening program
     */
    public LegRecord setSecureFlightArrivalReqd(String value) {
        set(111, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.secure_flight_arrival_reqd</code>. US PAX pre-screening program
     */
    public String getSecureFlightArrivalReqd() {
        return (String) get(111);
    }

    /**
     * Setter for <code>dcs.leg.secure_flight_departure_reqd</code>. US PAX pre-screening program
     */
    public LegRecord setSecureFlightDepartureReqd(String value) {
        set(112, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.secure_flight_departure_reqd</code>. US PAX pre-screening program
     */
    public String getSecureFlightDepartureReqd() {
        return (String) get(112);
    }

    /**
     * Setter for <code>dcs.leg.secure_flight_overfly_reqd</code>. US PAX pre-screening program
     */
    public LegRecord setSecureFlightOverflyReqd(String value) {
        set(113, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.secure_flight_overfly_reqd</code>. US PAX pre-screening program
     */
    public String getSecureFlightOverflyReqd() {
        return (String) get(113);
    }

    /**
     * Setter for <code>dcs.leg.skycouch_flight</code>. The Skycouch is a row of three Economy seats that together create a flexible space for whatever you want it to be - an area to relax and stretch out in, or for the kids to use as a play area. It?s like having your very own couch on the plane.
     */
    public LegRecord setSkycouchFlight(String value) {
        set(114, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.skycouch_flight</code>. The Skycouch is a row of three Economy seats that together create a flexible space for whatever you want it to be - an area to relax and stretch out in, or for the kids to use as a play area. It?s like having your very own couch on the plane.
     */
    public String getSkycouchFlight() {
        return (String) get(114);
    }

    /**
     * Setter for <code>dcs.leg.smallpox_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Smallpox certificate for the destination.
     */
    public LegRecord setSmallpoxCertificateReqd(String value) {
        set(115, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.smallpox_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Smallpox certificate for the destination.
     */
    public String getSmallpoxCertificateReqd() {
        return (String) get(115);
    }

    /**
     * Setter for <code>dcs.leg.tail_number</code>. The number that uniquely identifies the aircaft within the territory that it is registered in
     */
    public LegRecord setTailNumber(String value) {
        set(116, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.tail_number</code>. The number that uniquely identifies the aircaft within the territory that it is registered in
     */
    public String getTailNumber() {
        return (String) get(116);
    }

    /**
     * Setter for <code>dcs.leg.through_check_in_indicator</code>. Indicates if Through Check-In function is active or not at this station.
     */
    public LegRecord setThroughCheckInIndicator(String value) {
        set(117, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.through_check_in_indicator</code>. Indicates if Through Check-In function is active or not at this station.
     */
    public String getThroughCheckInIndicator() {
        return (String) get(117);
    }

    /**
     * Setter for <code>dcs.leg.ticket_numbers_reqd</code>. Does this flight require ticket numbers during Flight Interruption Manifest (FIM) process.
     */
    public LegRecord setTicketNumbersReqd(String value) {
        set(118, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.ticket_numbers_reqd</code>. Does this flight require ticket numbers during Flight Interruption Manifest (FIM) process.
     */
    public String getTicketNumbersReqd() {
        return (String) get(118);
    }

    /**
     * Setter for <code>dcs.leg.tp_inhibited_at_this_station</code>. Indicates if Tranfer PAX (TP) function is disabled at this station or not.
     */
    public LegRecord setTpInhibitedAtThisStation(String value) {
        set(119, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.tp_inhibited_at_this_station</code>. Indicates if Tranfer PAX (TP) function is disabled at this station or not.
     */
    public String getTpInhibitedAtThisStation() {
        return (String) get(119);
    }

    /**
     * Setter for <code>dcs.leg.visa_reqd</code>. Indicates (to check-in staff) that PAX require Visa for the destination.
     */
    public LegRecord setVisaReqd(String value) {
        set(120, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.visa_reqd</code>. Indicates (to check-in staff) that PAX require Visa for the destination.
     */
    public String getVisaReqd() {
        return (String) get(120);
    }

    /**
     * Setter for <code>dcs.leg.yellow_fever_cert_reqd</code>. Indicates (to check-in staff) that PAX require Yellow Fever certificate for the destination.
     */
    public LegRecord setYellowFeverCertReqd(String value) {
        set(121, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.yellow_fever_cert_reqd</code>. Indicates (to check-in staff) that PAX require Yellow Fever certificate for the destination.
     */
    public String getYellowFeverCertReqd() {
        return (String) get(121);
    }

    /**
     * Setter for <code>dcs.leg.dead_bag_verifctn_station</code>. Indicates if Dead Bag Verification function (to verify KIOSK printed bag tags at bag drops) is active or not at this station.
     */
    public LegRecord setDeadBagVerifctnStation(String value) {
        set(122, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.dead_bag_verifctn_station</code>. Indicates if Dead Bag Verification function (to verify KIOSK printed bag tags at bag drops) is active or not at this station.
     */
    public String getDeadBagVerifctnStation() {
        return (String) get(122);
    }

    /**
     * Setter for <code>dcs.leg.boardng_inhbtr_actv_ths_statn</code>. Indicates if Boarding Inhibitor function is active or not at this station.
     */
    public LegRecord setBoardngInhbtrActvThsStatn(String value) {
        set(123, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.boardng_inhbtr_actv_ths_statn</code>. Indicates if Boarding Inhibitor function is active or not at this station.
     */
    public String getBoardngInhbtrActvThsStatn() {
        return (String) get(123);
    }

    /**
     * Setter for <code>dcs.leg.traffic_restrctns_in_force</code>. Indicates if Traffic Restrictions (where an airline can not carry passenger between two cities) are in force for this leg or not.
     */
    public LegRecord setTrafficRestrctnsInForce(String value) {
        set(124, value);
        return this;
    }

    /**
     * Getter for <code>dcs.leg.traffic_restrctns_in_force</code>. Indicates if Traffic Restrictions (where an airline can not carry passenger between two cities) are in force for this leg or not.
     */
    public String getTrafficRestrctnsInForce() {
        return (String) get(124);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LegRecord
     */
    public LegRecord() {
        super(Leg.LEG);
    }

    /**
     * Create a detached, initialised LegRecord
     */
    public LegRecord(String flightIdComposite, String airlineCode, String flightNumber, Date flightOriginDate, String departAirportIata, Integer dcsFlightVersionNum, Integer legSeqNo, String actionCode, String actionStation, String agentCode, String dateStamp, String setAddress, String aircraftTypeFull, String aircraftConfigCode, String airportFrom, String timeStamp, String aircraftRegCountry, String aircraftVersion, String airportTo, String aircraftRegistration, String apiArrivalReqd, String aircraftType_3Char, String apiArrivalSent, String apiDepartureReqd, String apiDepartureSent, String apisSent, String appArrivalReqd, String appDepartureReqd, String aqqArrivalReqd, String aqqDepartureReqd, String aqqFlightCancelComplete, String aqqFlightCloseComplete, String autoDocCheckAdcActive, String autoRegradeIndicator, String baggageByPieceReqd, String baggageByWeightReqd, String baggageChuteNumOnBagTag, String baggageTransferMsgProdT, String baggageTransferMsgReqdT, Integer boardingStartTime, String cancelLandingAtADestn, String cbsaArrivalReqd, String cbsaDepartureReqd, String charterFlight, String checkInOptionIndicator, String choleraCertificateReqd, String codeshareFlightNumbers, String crewCode, String documentAirlineCode, String documentFlightNumber, String estimatedDepartureTime, String excessBagsRestricted, String fastTrackActive, String flightForDemoPurpose, String flightInDisruptStatus, String flightStatus, Integer flightType, String fomSent, String freqTravellerListProdF, String freqTravellerListReqdF, String ftlSent, String fullNameCheckinReqd, Integer fxEntryTimeStamp, String gateNumber, String handBaggageWeightReqd, String handbackMsgProdB, String handbackMsgReqdB, String hbSent, String idmSent, String idmSubloadProdI, String idmSubloadReqdI, String isCodeshare, String loadSignalProdL, String loadSignalReqdL, String maskCode, String matarikiTasmanFlight, String mrktngFlghtOnBpassFlag, String mrktngFlightOnBagtagFlag, String mvtSent, Integer operatingCabinCrewCount, Integer operatingTechCrewCount, String origAirlineCode, Integer origFlightLastVrsnNum, String origFlightNumber, Date origFlightOriginDate, String originatorTransitFlight, String pantryCode, String paxFirstNameReqd, String paxInitialsReqd, String paxManifestProdM, String paxManifestReqdM, String paxNamesTranfrd, String paxServiceMsgProdH, String paxServiceMsgReqdH, String pnlCodesharePaxCreated, String pnlExpectedThisFlight, String preventSeatChanges, String prlShootbackProd, String psmSent, String ptmPaxDisembarkingProdD, String ptmPaxDisembarkingReqdD, String replaceDestination, Timestamp schdArrivalDate, String schdArrivalTime, String schdDepartureTime, Timestamp schdLegDepartureDate, String seatPlanProdP, String seatPlanReqdP, String seats_2SuitFlight, String seatsOccupdSignalReqdO, String seatsOccupdSignlProdO, String secureFlightArrivalReqd, String secureFlightDepartureReqd, String secureFlightOverflyReqd, String skycouchFlight, String smallpoxCertificateReqd, String tailNumber, String throughCheckInIndicator, String ticketNumbersReqd, String tpInhibitedAtThisStation, String visaReqd, String yellowFeverCertReqd, String deadBagVerifctnStation, String boardngInhbtrActvThsStatn, String trafficRestrctnsInForce) {
        super(Leg.LEG);

        set(0, flightIdComposite);
        set(1, airlineCode);
        set(2, flightNumber);
        set(3, flightOriginDate);
        set(4, departAirportIata);
        set(5, dcsFlightVersionNum);
        set(6, legSeqNo);
        set(7, actionCode);
        set(8, actionStation);
        set(9, agentCode);
        set(10, dateStamp);
        set(11, setAddress);
        set(12, aircraftTypeFull);
        set(13, aircraftConfigCode);
        set(14, airportFrom);
        set(15, timeStamp);
        set(16, aircraftRegCountry);
        set(17, aircraftVersion);
        set(18, airportTo);
        set(19, aircraftRegistration);
        set(20, apiArrivalReqd);
        set(21, aircraftType_3Char);
        set(22, apiArrivalSent);
        set(23, apiDepartureReqd);
        set(24, apiDepartureSent);
        set(25, apisSent);
        set(26, appArrivalReqd);
        set(27, appDepartureReqd);
        set(28, aqqArrivalReqd);
        set(29, aqqDepartureReqd);
        set(30, aqqFlightCancelComplete);
        set(31, aqqFlightCloseComplete);
        set(32, autoDocCheckAdcActive);
        set(33, autoRegradeIndicator);
        set(34, baggageByPieceReqd);
        set(35, baggageByWeightReqd);
        set(36, baggageChuteNumOnBagTag);
        set(37, baggageTransferMsgProdT);
        set(38, baggageTransferMsgReqdT);
        set(39, boardingStartTime);
        set(40, cancelLandingAtADestn);
        set(41, cbsaArrivalReqd);
        set(42, cbsaDepartureReqd);
        set(43, charterFlight);
        set(44, checkInOptionIndicator);
        set(45, choleraCertificateReqd);
        set(46, codeshareFlightNumbers);
        set(47, crewCode);
        set(48, documentAirlineCode);
        set(49, documentFlightNumber);
        set(50, estimatedDepartureTime);
        set(51, excessBagsRestricted);
        set(52, fastTrackActive);
        set(53, flightForDemoPurpose);
        set(54, flightInDisruptStatus);
        set(55, flightStatus);
        set(56, flightType);
        set(57, fomSent);
        set(58, freqTravellerListProdF);
        set(59, freqTravellerListReqdF);
        set(60, ftlSent);
        set(61, fullNameCheckinReqd);
        set(62, fxEntryTimeStamp);
        set(63, gateNumber);
        set(64, handBaggageWeightReqd);
        set(65, handbackMsgProdB);
        set(66, handbackMsgReqdB);
        set(67, hbSent);
        set(68, idmSent);
        set(69, idmSubloadProdI);
        set(70, idmSubloadReqdI);
        set(71, isCodeshare);
        set(72, loadSignalProdL);
        set(73, loadSignalReqdL);
        set(74, maskCode);
        set(75, matarikiTasmanFlight);
        set(76, mrktngFlghtOnBpassFlag);
        set(77, mrktngFlightOnBagtagFlag);
        set(78, mvtSent);
        set(79, operatingCabinCrewCount);
        set(80, operatingTechCrewCount);
        set(81, origAirlineCode);
        set(82, origFlightLastVrsnNum);
        set(83, origFlightNumber);
        set(84, origFlightOriginDate);
        set(85, originatorTransitFlight);
        set(86, pantryCode);
        set(87, paxFirstNameReqd);
        set(88, paxInitialsReqd);
        set(89, paxManifestProdM);
        set(90, paxManifestReqdM);
        set(91, paxNamesTranfrd);
        set(92, paxServiceMsgProdH);
        set(93, paxServiceMsgReqdH);
        set(94, pnlCodesharePaxCreated);
        set(95, pnlExpectedThisFlight);
        set(96, preventSeatChanges);
        set(97, prlShootbackProd);
        set(98, psmSent);
        set(99, ptmPaxDisembarkingProdD);
        set(100, ptmPaxDisembarkingReqdD);
        set(101, replaceDestination);
        set(102, schdArrivalDate);
        set(103, schdArrivalTime);
        set(104, schdDepartureTime);
        set(105, schdLegDepartureDate);
        set(106, seatPlanProdP);
        set(107, seatPlanReqdP);
        set(108, seats_2SuitFlight);
        set(109, seatsOccupdSignalReqdO);
        set(110, seatsOccupdSignlProdO);
        set(111, secureFlightArrivalReqd);
        set(112, secureFlightDepartureReqd);
        set(113, secureFlightOverflyReqd);
        set(114, skycouchFlight);
        set(115, smallpoxCertificateReqd);
        set(116, tailNumber);
        set(117, throughCheckInIndicator);
        set(118, ticketNumbersReqd);
        set(119, tpInhibitedAtThisStation);
        set(120, visaReqd);
        set(121, yellowFeverCertReqd);
        set(122, deadBagVerifctnStation);
        set(123, boardngInhbtrActvThsStatn);
        set(124, trafficRestrctnsInForce);
    }
}
