/*
 * This file is generated by jOOQ.
*/
package nz.co.airnz.svof.dcsdb.model.tables;


import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nz.co.airnz.svof.dcsdb.model.Dcs;
import nz.co.airnz.svof.dcsdb.model.Keys;
import nz.co.airnz.svof.dcsdb.model.tables.records.LegRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Leg extends TableImpl<LegRecord> {

    private static final long serialVersionUID = -2071799202;

    /**
     * The reference instance of <code>dcs.leg</code>
     */
    public static final Leg LEG = new Leg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LegRecord> getRecordType() {
        return LegRecord.class;
    }

    /**
     * The column <code>dcs.leg.flight_id_composite</code>.
     */
    public final TableField<LegRecord, String> FLIGHT_ID_COMPOSITE = createField("flight_id_composite", org.jooq.impl.SQLDataType.VARCHAR.length(21).nullable(false), this, "");

    /**
     * The column <code>dcs.leg.airline_code</code>.
     */
    public final TableField<LegRecord, String> AIRLINE_CODE = createField("airline_code", org.jooq.impl.SQLDataType.VARCHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>dcs.leg.flight_number</code>.
     */
    public final TableField<LegRecord, String> FLIGHT_NUMBER = createField("flight_number", org.jooq.impl.SQLDataType.VARCHAR.length(4).nullable(false), this, "");

    /**
     * The column <code>dcs.leg.flight_origin_date</code>. Per equivalent key attribute on Flight table
     */
    public final TableField<LegRecord, Date> FLIGHT_ORIGIN_DATE = createField("flight_origin_date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "Per equivalent key attribute on Flight table");

    /**
     * The column <code>dcs.leg.depart_airport_iata</code>.
     */
    public final TableField<LegRecord, String> DEPART_AIRPORT_IATA = createField("depart_airport_iata", org.jooq.impl.SQLDataType.VARCHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>dcs.leg.dcs_flight_version_num</code>.
     */
    public final TableField<LegRecord, Integer> DCS_FLIGHT_VERSION_NUM = createField("dcs_flight_version_num", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dcs.leg.leg_seq_no</code>.
     */
    public final TableField<LegRecord, Integer> LEG_SEQ_NO = createField("leg_seq_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dcs.leg.action_code</code>. (blank)
     */
    public final TableField<LegRecord, String> ACTION_CODE = createField("action_code", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "(blank)");

    /**
     * The column <code>dcs.leg.action_station</code>. (blank)
     */
    public final TableField<LegRecord, String> ACTION_STATION = createField("action_station", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "(blank)");

    /**
     * The column <code>dcs.leg.agent_code</code>. (blank)
     */
    public final TableField<LegRecord, String> AGENT_CODE = createField("agent_code", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "(blank)");

    /**
     * The column <code>dcs.leg.date_stamp</code>. (blank)
     */
    public final TableField<LegRecord, String> DATE_STAMP = createField("date_stamp", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "(blank)");

    /**
     * The column <code>dcs.leg.set_address</code>. (blank)
     */
    public final TableField<LegRecord, String> SET_ADDRESS = createField("set_address", org.jooq.impl.SQLDataType.VARCHAR.length(8), this, "(blank)");

    /**
     * The column <code>dcs.leg.aircraft_type_full</code>. Aircraft type is a 2/3/4-character alphanumeric code designating every aircraft type that may appear in flight planning. These codes are defined by the International Civil Aviation Organization (ICAO).
     */
    public final TableField<LegRecord, String> AIRCRAFT_TYPE_FULL = createField("aircraft_type_full", org.jooq.impl.SQLDataType.VARCHAR.length(7), this, "Aircraft type is a 2/3/4-character alphanumeric code designating every aircraft type that may appear in flight planning. These codes are defined by the International Civil Aviation Organization (ICAO).");

    /**
     * The column <code>dcs.leg.aircraft_config_code</code>. This character indicates the combination of classes and its corresponding seats to be used in this flight.
     */
    public final TableField<LegRecord, String> AIRCRAFT_CONFIG_CODE = createField("aircraft_config_code", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "This character indicates the combination of classes and its corresponding seats to be used in this flight.");

    /**
     * The column <code>dcs.leg.airport_from</code>. Flight departs from this airport.
     */
    public final TableField<LegRecord, String> AIRPORT_FROM = createField("airport_from", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Flight departs from this airport.");

    /**
     * The column <code>dcs.leg.time_stamp</code>. (blank)
     */
    public final TableField<LegRecord, String> TIME_STAMP = createField("time_stamp", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "(blank)");

    /**
     * The column <code>dcs.leg.aircraft_reg_country</code>. The aircraft registration country code
     */
    public final TableField<LegRecord, String> AIRCRAFT_REG_COUNTRY = createField("aircraft_reg_country", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "The aircraft registration country code");

    /**
     * The column <code>dcs.leg.aircraft_version</code>. This field is an extension of the Aircraft Configuration Code, where it shows the actual classes and the number of seats in it.
     */
    public final TableField<LegRecord, String> AIRCRAFT_VERSION = createField("aircraft_version", org.jooq.impl.SQLDataType.VARCHAR.length(12), this, "This field is an extension of the Aircraft Configuration Code, where it shows the actual classes and the number of seats in it.");

    /**
     * The column <code>dcs.leg.airport_to</code>. Flight arrives into this airport.
     */
    public final TableField<LegRecord, String> AIRPORT_TO = createField("airport_to", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Flight arrives into this airport.");

    /**
     * The column <code>dcs.leg.aircraft_registration</code>. This is a concatenation of the aircraft registration country code plus the tail number. The National Aviation Authority (NAA) allocates a unique alphanumeric string to identify the aircraft, which also indicates the nationality (i.e., country of registration) of the aircraft, and provides a legal document called a Certificate of Registration, one of the documents which must be carried when the aircraft is in operation.
     */
    public final TableField<LegRecord, String> AIRCRAFT_REGISTRATION = createField("aircraft_registration", org.jooq.impl.SQLDataType.VARCHAR.length(6).nullable(false), this, "This is a concatenation of the aircraft registration country code plus the tail number. The National Aviation Authority (NAA) allocates a unique alphanumeric string to identify the aircraft, which also indicates the nationality (i.e., country of registration) of the aircraft, and provides a legal document called a Certificate of Registration, one of the documents which must be carried when the aircraft is in operation.");

    /**
     * The column <code>dcs.leg.api_arrival_reqd</code>. Indicates if Advance Passenger Information (API) for Arrival is required or not.
     */
    public final TableField<LegRecord, String> API_ARRIVAL_REQD = createField("api_arrival_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Advance Passenger Information (API) for Arrival is required or not.");

    /**
     * The column <code>dcs.leg.aircraft_type_3_char</code>. (blank)
     */
    public final TableField<LegRecord, String> AIRCRAFT_TYPE_3_CHAR = createField("aircraft_type_3_char", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "(blank)");

    /**
     * The column <code>dcs.leg.api_arrival_sent</code>. Indicates if Advance Passenger Information (API) for Arrival is sent or not.
     */
    public final TableField<LegRecord, String> API_ARRIVAL_SENT = createField("api_arrival_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Advance Passenger Information (API) for Arrival is sent or not.");

    /**
     * The column <code>dcs.leg.api_departure_reqd</code>. Indicates if Advance Passenger Information (API) for Departure is required or not.
     */
    public final TableField<LegRecord, String> API_DEPARTURE_REQD = createField("api_departure_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Advance Passenger Information (API) for Departure is required or not.");

    /**
     * The column <code>dcs.leg.api_departure_sent</code>. Indicates if Advance Passenger Information (API) for Departure is sent or not.
     */
    public final TableField<LegRecord, String> API_DEPARTURE_SENT = createField("api_departure_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Advance Passenger Information (API) for Departure is sent or not.");

    /**
     * The column <code>dcs.leg.apis_sent</code>. SG/Peter ??? Items 42-45 are in MFT and item 46 is in CTL, are they same or different ?
     */
    public final TableField<LegRecord, String> APIS_SENT = createField("apis_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "SG/Peter ??? Items 42-45 are in MFT and item 46 is in CTL, are they same or different ?");

    /**
     * The column <code>dcs.leg.app_arrival_reqd</code>. Advance Passenger Processing (APP) for Arrival (Australia, NZ, etc. PAX pre-screening program)
     */
    public final TableField<LegRecord, String> APP_ARRIVAL_REQD = createField("app_arrival_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Advance Passenger Processing (APP) for Arrival (Australia, NZ, etc. PAX pre-screening program)");

    /**
     * The column <code>dcs.leg.app_departure_reqd</code>. Advance Passenger Processing (APP) for Departure (Australia, NZ, etc. PAX pre-screening program)
     */
    public final TableField<LegRecord, String> APP_DEPARTURE_REQD = createField("app_departure_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Advance Passenger Processing (APP) for Departure (Australia, NZ, etc. PAX pre-screening program)");

    /**
     * The column <code>dcs.leg.aqq_arrival_reqd</code>. APIS Quick Query (AQQ) for Arrival (US PAX pre-screening program)
     */
    public final TableField<LegRecord, String> AQQ_ARRIVAL_REQD = createField("aqq_arrival_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "APIS Quick Query (AQQ) for Arrival (US PAX pre-screening program)");

    /**
     * The column <code>dcs.leg.aqq_departure_reqd</code>. APIS Quick Query (AQQ) for Departure (US PAX pre-screening program)
     */
    public final TableField<LegRecord, String> AQQ_DEPARTURE_REQD = createField("aqq_departure_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "APIS Quick Query (AQQ) for Departure (US PAX pre-screening program)");

    /**
     * The column <code>dcs.leg.aqq_flight_cancel_complete</code>. Indicates AQQ flight Cancelled message sent to SITA for flights to and from the USA and GBR.
     */
    public final TableField<LegRecord, String> AQQ_FLIGHT_CANCEL_COMPLETE = createField("aqq_flight_cancel_complete", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates AQQ flight Cancelled message sent to SITA for flights to and from the USA and GBR.");

    /**
     * The column <code>dcs.leg.aqq_flight_close_complete</code>. Indicates AQQ flight Close message sent to SITA for flights to and from the USA and GBR.
     */
    public final TableField<LegRecord, String> AQQ_FLIGHT_CLOSE_COMPLETE = createField("aqq_flight_close_complete", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates AQQ flight Close message sent to SITA for flights to and from the USA and GBR.");

    /**
     * The column <code>dcs.leg.auto_doc_check_adc_active</code>. Pre-check PAX documents during Web and Mobile check-in
     */
    public final TableField<LegRecord, String> AUTO_DOC_CHECK_ADC_ACTIVE = createField("auto_doc_check_adc_active", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Pre-check PAX documents during Web and Mobile check-in");

    /**
     * The column <code>dcs.leg.auto_regrade_indicator</code>. Indicates if any PAX with a V-edit (Alternate class) or staff with an upgradeable category will be accepted into the desired class providing there are seats available in that class.
     */
    public final TableField<LegRecord, String> AUTO_REGRADE_INDICATOR = createField("auto_regrade_indicator", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if any PAX with a V-edit (Alternate class) or staff with an upgradeable category will be accepted into the desired class providing there are seats available in that class.");

    /**
     * The column <code>dcs.leg.baggage_by_piece_reqd</code>. This is the requirements of the carrier for weight and balance calculations, and determines what entries are required by the check-in agents.  Number of pieces of checked baggage / The weight of checked baggage / The weight of hand baggage / Blank means standard baggage weight per passenger.
     */
    public final TableField<LegRecord, String> BAGGAGE_BY_PIECE_REQD = createField("baggage_by_piece_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "This is the requirements of the carrier for weight and balance calculations, and determines what entries are required by the check-in agents.  Number of pieces of checked baggage / The weight of checked baggage / The weight of hand baggage / Blank means standard baggage weight per passenger.");

    /**
     * The column <code>dcs.leg.baggage_by_weight_reqd</code>. (blank)
     */
    public final TableField<LegRecord, String> BAGGAGE_BY_WEIGHT_REQD = createField("baggage_by_weight_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "(blank)");

    /**
     * The column <code>dcs.leg.baggage_chute_num_on_bag_tag</code>. Indicates if the Baggage Chute number is printed on Bag Tags or not.
     */
    public final TableField<LegRecord, String> BAGGAGE_CHUTE_NUM_ON_BAG_TAG = createField("baggage_chute_num_on_bag_tag", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the Baggage Chute number is printed on Bag Tags or not.");

    /**
     * The column <code>dcs.leg.baggage_transfer_msg_prod_t</code>. Indicates if Baggage Transfer Message is produced or not.
     */
    public final TableField<LegRecord, String> BAGGAGE_TRANSFER_MSG_PROD_T = createField("baggage_transfer_msg_prod_t", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Baggage Transfer Message is produced or not.");

    /**
     * The column <code>dcs.leg.baggage_transfer_msg_reqd_t</code>. Indicates if Baggage Transfer Message is required or not.
     */
    public final TableField<LegRecord, String> BAGGAGE_TRANSFER_MSG_REQD_T = createField("baggage_transfer_msg_reqd_t", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Baggage Transfer Message is required or not.");

    /**
     * The column <code>dcs.leg.boarding_start_time</code>. The time in minutes, when boarding starts before scheduled departure of flight.
     */
    public final TableField<LegRecord, Integer> BOARDING_START_TIME = createField("boarding_start_time", org.jooq.impl.SQLDataType.INTEGER, this, "The time in minutes, when boarding starts before scheduled departure of flight.");

    /**
     * The column <code>dcs.leg.cancel_landing_at_a_destn</code>. Indicates if the landing is cancelled at a destination.
     */
    public final TableField<LegRecord, String> CANCEL_LANDING_AT_A_DESTN = createField("cancel_landing_at_a_destn", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the landing is cancelled at a destination.");

    /**
     * The column <code>dcs.leg.cbsa_arrival_reqd</code>. Canada Border Services Agency (CBSA) for Arrival
     */
    public final TableField<LegRecord, String> CBSA_ARRIVAL_REQD = createField("cbsa_arrival_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Canada Border Services Agency (CBSA) for Arrival");

    /**
     * The column <code>dcs.leg.cbsa_departure_reqd</code>. Canada Border Services Agency (CBSA) for Departure
     */
    public final TableField<LegRecord, String> CBSA_DEPARTURE_REQD = createField("cbsa_departure_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Canada Border Services Agency (CBSA) for Departure");

    /**
     * The column <code>dcs.leg.charter_flight</code>. Indicates a flight by an aircraft chartered for a specific journey, not part of an airline's regular schedule.
     */
    public final TableField<LegRecord, String> CHARTER_FLIGHT = createField("charter_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates a flight by an aircraft chartered for a specific journey, not part of an airline's regular schedule.");

    /**
     * The column <code>dcs.leg.check_in_option_indicator</code>. Three options for the type of check in that is required for a specific flight: OPTION 1: Numeric type check-in. OPTION 2: Each PAX to be identified by name. NOREC OPTION: The norec option check in will accept passengers holding OK tickets on a first come, first served basis. This is similar to Option 1 check in method except that name identification is required.
     */
    public final TableField<LegRecord, String> CHECK_IN_OPTION_INDICATOR = createField("check_in_option_indicator", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Three options for the type of check in that is required for a specific flight: OPTION 1: Numeric type check-in. OPTION 2: Each PAX to be identified by name. NOREC OPTION: The norec option check in will accept passengers holding OK tickets on a first come, first served basis. This is similar to Option 1 check in method except that name identification is required.");

    /**
     * The column <code>dcs.leg.cholera_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Cholera certificate for the destination.
     */
    public final TableField<LegRecord, String> CHOLERA_CERTIFICATE_REQD = createField("cholera_certificate_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates (to check-in staff) that PAX require Cholera certificate for the destination.");

    /**
     * The column <code>dcs.leg.codeshare_flight_numbers</code>. Contains the list of all flight numbers that has a codeshare agreement in this flight.
     */
    public final TableField<LegRecord, String> CODESHARE_FLIGHT_NUMBERS = createField("codeshare_flight_numbers", org.jooq.impl.SQLDataType.VARCHAR.length(42), this, "Contains the list of all flight numbers that has a codeshare agreement in this flight.");

    /**
     * The column <code>dcs.leg.crew_code</code>. This character indicates the combination of cockpit and cabin crew to be operated on this flight.
     */
    public final TableField<LegRecord, String> CREW_CODE = createField("crew_code", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "This character indicates the combination of cockpit and cabin crew to be operated on this flight.");

    /**
     * The column <code>dcs.leg.document_airline_code</code>. Used during old times, for an internal purpose to store another flight number, in cases like, where a multi-leg flight flew one leg with one equipment and the  other leg with another equipment, but the flight number remained the same. Whereas, DCS tracked them differently using these fields.
     */
    public final TableField<LegRecord, String> DOCUMENT_AIRLINE_CODE = createField("document_airline_code", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Used during old times, for an internal purpose to store another flight number, in cases like, where a multi-leg flight flew one leg with one equipment and the  other leg with another equipment, but the flight number remained the same. Whereas, DCS tracked them differently using these fields.");

    /**
     * The column <code>dcs.leg.document_flight_number</code>. (blank)
     */
    public final TableField<LegRecord, String> DOCUMENT_FLIGHT_NUMBER = createField("document_flight_number", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "(blank)");

    /**
     * The column <code>dcs.leg.estimated_departure_time</code>. A flight leg's estimated local time of departure from an airport.
     */
    public final TableField<LegRecord, String> ESTIMATED_DEPARTURE_TIME = createField("estimated_departure_time", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "A flight leg's estimated local time of departure from an airport.");

    /**
     * The column <code>dcs.leg.excess_bags_restricted</code>. Indicates whether Excess Baggages can be accepted or not out of this station.
     */
    public final TableField<LegRecord, String> EXCESS_BAGS_RESTRICTED = createField("excess_bags_restricted", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates whether Excess Baggages can be accepted or not out of this station.");

    /**
     * The column <code>dcs.leg.fast_track_active</code>. Indicates that Fast Track facility (where a PAX can go thru a special fast lane of Immigration/Security with the help of an indicator in the Boarding Pass) is active at this station or not.
     */
    public final TableField<LegRecord, String> FAST_TRACK_ACTIVE = createField("fast_track_active", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates that Fast Track facility (where a PAX can go thru a special fast lane of Immigration/Security with the help of an indicator in the Boarding Pass) is active at this station or not.");

    /**
     * The column <code>dcs.leg.flight_for_demo_purpose</code>. Indicates if a flight is being used for a demonstration purpose.
     */
    public final TableField<LegRecord, String> FLIGHT_FOR_DEMO_PURPOSE = createField("flight_for_demo_purpose", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if a flight is being used for a demonstration purpose.");

    /**
     * The column <code>dcs.leg.flight_in_disrupt_status</code>. Indicates whether a scheduled flight is disrupted or not.
     */
    public final TableField<LegRecord, String> FLIGHT_IN_DISRUPT_STATUS = createField("flight_in_disrupt_status", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates whether a scheduled flight is disrupted or not.");

    /**
     * The column <code>dcs.leg.flight_status</code>. Indicates the current status of a flight, like FE, FO, FH, FC, FF, etc.
     */
    public final TableField<LegRecord, String> FLIGHT_STATUS = createField("flight_status", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "Indicates the current status of a flight, like FE, FO, FH, FC, FF, etc.");

    /**
     * The column <code>dcs.leg.flight_type</code>. Type-0 = Reservation controlled flight, Type-1 = Non-Reservation controlled flight
     */
    public final TableField<LegRecord, Integer> FLIGHT_TYPE = createField("flight_type", org.jooq.impl.SQLDataType.INTEGER, this, "Type-0 = Reservation controlled flight, Type-1 = Non-Reservation controlled flight");

    /**
     * The column <code>dcs.leg.fom_sent</code>. Flight Open Message (FOM) is sent to the Baggage Reconciliation System to open flight for baggage messages, when the flight is opened in DCS.
     */
    public final TableField<LegRecord, String> FOM_SENT = createField("fom_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Flight Open Message (FOM) is sent to the Baggage Reconciliation System to open flight for baggage messages, when the flight is opened in DCS.");

    /**
     * The column <code>dcs.leg.freq_traveller_list_prod_f</code>. Indicates if Frequent Traveller List message is produced or not.
     */
    public final TableField<LegRecord, String> FREQ_TRAVELLER_LIST_PROD_F = createField("freq_traveller_list_prod_f", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Frequent Traveller List message is produced or not.");

    /**
     * The column <code>dcs.leg.freq_traveller_list_reqd_f</code>. Indicates if Frequent Traveller List message is required or not.
     */
    public final TableField<LegRecord, String> FREQ_TRAVELLER_LIST_REQD_F = createField("freq_traveller_list_reqd_f", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Frequent Traveller List message is required or not.");

    /**
     * The column <code>dcs.leg.ftl_sent</code>. IATA Frequent Traveller List (FTL) message
     */
    public final TableField<LegRecord, String> FTL_SENT = createField("ftl_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "IATA Frequent Traveller List (FTL) message");

    /**
     * The column <code>dcs.leg.full_name_checkin_reqd</code>. Indicates if PAX full names are required or not for check-in.
     */
    public final TableField<LegRecord, String> FULL_NAME_CHECKIN_REQD = createField("full_name_checkin_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if PAX full names are required or not for check-in.");

    /**
     * The column <code>dcs.leg.fx_entry_time_stamp</code>. FX action code is to cancel all incomplete check-in entries to allow flight closure to proceed.
     */
    public final TableField<LegRecord, Integer> FX_ENTRY_TIME_STAMP = createField("fx_entry_time_stamp", org.jooq.impl.SQLDataType.INTEGER, this, "FX action code is to cancel all incomplete check-in entries to allow flight closure to proceed.");

    /**
     * The column <code>dcs.leg.gate_number</code>. The gate number through which all PAX have to board the aircraft.
     */
    public final TableField<LegRecord, String> GATE_NUMBER = createField("gate_number", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "The gate number through which all PAX have to board the aircraft.");

    /**
     * The column <code>dcs.leg.hand_baggage_weight_reqd</code>. (blank)
     */
    public final TableField<LegRecord, String> HAND_BAGGAGE_WEIGHT_REQD = createField("hand_baggage_weight_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "(blank)");

    /**
     * The column <code>dcs.leg.handback_msg_prod_b</code>. Indicates if Handback is produced or not.
     */
    public final TableField<LegRecord, String> HANDBACK_MSG_PROD_B = createField("handback_msg_prod_b", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Handback is produced or not.");

    /**
     * The column <code>dcs.leg.handback_msg_reqd_b</code>. Indicates if Handback (list of PAX to RES office, whose reservation status has changed due to DCS transactions.) is required or not.
     */
    public final TableField<LegRecord, String> HANDBACK_MSG_REQD_B = createField("handback_msg_reqd_b", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Handback (list of PAX to RES office, whose reservation status has changed due to DCS transactions.) is required or not.");

    /**
     * The column <code>dcs.leg.hb_sent</code>. Handback Message will contain details of PAX, whose reservation status has changed due to DCS transactions.
     */
    public final TableField<LegRecord, String> HB_SENT = createField("hb_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Handback Message will contain details of PAX, whose reservation status has changed due to DCS transactions.");

    /**
     * The column <code>dcs.leg.idm_sent</code>. Industry Discount Message (IDM) will contain details of Rebate/Staff PAX transiting through the next downline stations.
     */
    public final TableField<LegRecord, String> IDM_SENT = createField("idm_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Industry Discount Message (IDM) will contain details of Rebate/Staff PAX transiting through the next downline stations.");

    /**
     * The column <code>dcs.leg.idm_subload_prod_i</code>. Indicates if Industry Discount Message is produced or not.
     */
    public final TableField<LegRecord, String> IDM_SUBLOAD_PROD_I = createField("idm_subload_prod_i", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Industry Discount Message is produced or not.");

    /**
     * The column <code>dcs.leg.idm_subload_reqd_i</code>. Indicates if Industry Discount Message (list of Rebate/Staff PAX transiting through the next downline stations) is required or not.
     */
    public final TableField<LegRecord, String> IDM_SUBLOAD_REQD_I = createField("idm_subload_reqd_i", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Industry Discount Message (list of Rebate/Staff PAX transiting through the next downline stations) is required or not.");

    /**
     * The column <code>dcs.leg.is_codeshare</code>. Indicates if a flight is in codeshare. Codeshare is an aviation business arrangement, where one airline puts its airline code and flight number on a flight operated by another airline.
     */
    public final TableField<LegRecord, String> IS_CODESHARE = createField("is_codeshare", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if a flight is in codeshare. Codeshare is an aviation business arrangement, where one airline puts its airline code and flight number on a flight operated by another airline.");

    /**
     * The column <code>dcs.leg.load_signal_prod_l</code>. Indicates if Load Distribution Message is produced or not.
     */
    public final TableField<LegRecord, String> LOAD_SIGNAL_PROD_L = createField("load_signal_prod_l", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Load Distribution Message is produced or not.");

    /**
     * The column <code>dcs.leg.load_signal_reqd_l</code>. Indicates if Load Distribution Message (used to communicate with the transit station to describe the cargo load) is required or not.
     */
    public final TableField<LegRecord, String> LOAD_SIGNAL_REQD_L = createField("load_signal_reqd_l", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Load Distribution Message (used to communicate with the transit station to describe the cargo load) is required or not.");

    /**
     * The column <code>dcs.leg.mask_code</code>. The Mask Code will indicate the basic seating logic in the aircraft, to allocate seats by row rather than cabin area. Usage will vary with different aircraft types.
     */
    public final TableField<LegRecord, String> MASK_CODE = createField("mask_code", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "The Mask Code will indicate the basic seating logic in the aircraft, to allocate seats by row rather than cabin area. Usage will vary with different aircraft types.");

    /**
     * The column <code>dcs.leg.matariki_tasman_flight</code>. Indicates if a flight is an International short haul, like flights to Australia and Pacific Islands.
     */
    public final TableField<LegRecord, String> MATARIKI_TASMAN_FLIGHT = createField("matariki_tasman_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if a flight is an International short haul, like flights to Australia and Pacific Islands.");

    /**
     * The column <code>dcs.leg.mrktng_flght_on_bpass_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Boarding Passes
     */
    public final TableField<LegRecord, String> MRKTNG_FLGHT_ON_BPASS_FLAG = createField("mrktng_flght_on_bpass_flag", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates whether the Marketing Flight number needs to be printed on the Boarding Passes");

    /**
     * The column <code>dcs.leg.mrktng_flight_on_bagtag_flag</code>. Indicates whether the Marketing Flight number needs to be printed on the Bag Tags
     */
    public final TableField<LegRecord, String> MRKTNG_FLIGHT_ON_BAGTAG_FLAG = createField("mrktng_flight_on_bagtag_flag", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates whether the Marketing Flight number needs to be printed on the Bag Tags");

    /**
     * The column <code>dcs.leg.mvt_sent</code>. To despatch IATA format Aircraft Movement Message (MVT), like Departure/Arrival/Delay/Diversion/etc., to appropriate addresses.
     */
    public final TableField<LegRecord, String> MVT_SENT = createField("mvt_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "To despatch IATA format Aircraft Movement Message (MVT), like Departure/Arrival/Delay/Diversion/etc., to appropriate addresses.");

    /**
     * The column <code>dcs.leg.operating_cabin_crew_count</code>. Total count of cabin crew members
     */
    public final TableField<LegRecord, Integer> OPERATING_CABIN_CREW_COUNT = createField("operating_cabin_crew_count", org.jooq.impl.SQLDataType.INTEGER, this, "Total count of cabin crew members");

    /**
     * The column <code>dcs.leg.operating_tech_crew_count</code>. Total count of cockpit crew members
     */
    public final TableField<LegRecord, Integer> OPERATING_TECH_CREW_COUNT = createField("operating_tech_crew_count", org.jooq.impl.SQLDataType.INTEGER, this, "Total count of cockpit crew members");

    /**
     * The column <code>dcs.leg.orig_airline_code</code>. If this is a disrupted flight, then this field has the original airline code.
     */
    public final TableField<LegRecord, String> ORIG_AIRLINE_CODE = createField("orig_airline_code", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "If this is a disrupted flight, then this field has the original airline code.");

    /**
     * The column <code>dcs.leg.orig_flight_last_vrsn_num</code>. If this is a disrupted flight, then this field has the original flight's last version number.
     */
    public final TableField<LegRecord, Integer> ORIG_FLIGHT_LAST_VRSN_NUM = createField("orig_flight_last_vrsn_num", org.jooq.impl.SQLDataType.INTEGER, this, "If this is a disrupted flight, then this field has the original flight's last version number.");

    /**
     * The column <code>dcs.leg.orig_flight_number</code>. If this is a disrupted flight, then this field has the original flight number.
     */
    public final TableField<LegRecord, String> ORIG_FLIGHT_NUMBER = createField("orig_flight_number", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "If this is a disrupted flight, then this field has the original flight number.");

    /**
     * The column <code>dcs.leg.orig_flight_origin_date</code>. If this is a disrupted flight, then this field has the original flight origin date.
     */
    public final TableField<LegRecord, Date> ORIG_FLIGHT_ORIGIN_DATE = createField("orig_flight_origin_date", org.jooq.impl.SQLDataType.DATE, this, "If this is a disrupted flight, then this field has the original flight origin date.");

    /**
     * The column <code>dcs.leg.originator_transit_flight</code>. Indicates if the current departing station is an originating/transiting station for this flight.
     */
    public final TableField<LegRecord, String> ORIGINATOR_TRANSIT_FLIGHT = createField("originator_transit_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the current departing station is an originating/transiting station for this flight.");

    /**
     * The column <code>dcs.leg.pantry_code</code>. This character indicates the combination of pantry/meals to be used in this flight.
     */
    public final TableField<LegRecord, String> PANTRY_CODE = createField("pantry_code", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "This character indicates the combination of pantry/meals to be used in this flight.");

    /**
     * The column <code>dcs.leg.pax_first_name_reqd</code>. Indicates if the PAX first name is required in PAX Manifest.
     */
    public final TableField<LegRecord, String> PAX_FIRST_NAME_REQD = createField("pax_first_name_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the PAX first name is required in PAX Manifest.");

    /**
     * The column <code>dcs.leg.pax_initials_reqd</code>. Indicates if the PAX initials are required in PAX Manifest.
     */
    public final TableField<LegRecord, String> PAX_INITIALS_REQD = createField("pax_initials_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the PAX initials are required in PAX Manifest.");

    /**
     * The column <code>dcs.leg.pax_manifest_prod_m</code>. Indicates if PAX Manifest is produced or not.
     */
    public final TableField<LegRecord, String> PAX_MANIFEST_PROD_M = createField("pax_manifest_prod_m", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if PAX Manifest is produced or not.");

    /**
     * The column <code>dcs.leg.pax_manifest_reqd_m</code>. Indicates if PAX Manifest (list of PAX of an aircraft for the use of customs and other officials) is required or not.
     */
    public final TableField<LegRecord, String> PAX_MANIFEST_REQD_M = createField("pax_manifest_reqd_m", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if PAX Manifest (list of PAX of an aircraft for the use of customs and other officials) is required or not.");

    /**
     * The column <code>dcs.leg.pax_names_tranfrd</code>. PAX Names (PN) transfer from RES to DCS will be done only once. Can be done twice. RGF Note - also referred to as PN Done?
     */
    public final TableField<LegRecord, String> PAX_NAMES_TRANFRD = createField("pax_names_tranfrd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "PAX Names (PN) transfer from RES to DCS will be done only once. Can be done twice. RGF Note - also referred to as PN Done?");

    /**
     * The column <code>dcs.leg.pax_service_msg_prod_h</code>. Indicates if Passenger Service Message is produced or not.
     */
    public final TableField<LegRecord, String> PAX_SERVICE_MSG_PROD_H = createField("pax_service_msg_prod_h", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Passenger Service Message is produced or not.");

    /**
     * The column <code>dcs.leg.pax_service_msg_reqd_h</code>. Indicates if Passenger Service Message (list of PAX who require special handling) is required or not.
     */
    public final TableField<LegRecord, String> PAX_SERVICE_MSG_REQD_H = createField("pax_service_msg_reqd_h", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Passenger Service Message (list of PAX who require special handling) is required or not.");

    /**
     * The column <code>dcs.leg.pnl_codeshare_pax_created</code>. Indicates the processing of Passenger Name List (PNL) of a Type-1 flight
     */
    public final TableField<LegRecord, String> PNL_CODESHARE_PAX_CREATED = createField("pnl_codeshare_pax_created", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates the processing of Passenger Name List (PNL) of a Type-1 flight");

    /**
     * The column <code>dcs.leg.pnl_expected_this_flight</code>. If it's a Type-1 Flight, then a PAX Name List (PNL) is expected from the other airline into our DCS system.
     */
    public final TableField<LegRecord, String> PNL_EXPECTED_THIS_FLIGHT = createField("pnl_expected_this_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "If it's a Type-1 Flight, then a PAX Name List (PNL) is expected from the other airline into our DCS system.");

    /**
     * The column <code>dcs.leg.prevent_seat_changes</code>. Indicates the prevention of seat changes by check-in staff for these classes.
     */
    public final TableField<LegRecord, String> PREVENT_SEAT_CHANGES = createField("prevent_seat_changes", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates the prevention of seat changes by check-in staff for these classes.");

    /**
     * The column <code>dcs.leg.prl_shootback_prod</code>. Passenger Reconcile List (PRL) is to provide RES with all PAX check-in details for actual boarded PAX of a flight departure.
     */
    public final TableField<LegRecord, String> PRL_SHOOTBACK_PROD = createField("prl_shootback_prod", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Passenger Reconcile List (PRL) is to provide RES with all PAX check-in details for actual boarded PAX of a flight departure.");

    /**
     * The column <code>dcs.leg.psm_sent</code>. Passenger Service Message (PSM) will contain details of PAX who require special handling, like unaccompanied minors, passengers with infants, etc.
     */
    public final TableField<LegRecord, String> PSM_SENT = createField("psm_sent", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Passenger Service Message (PSM) will contain details of PAX who require special handling, like unaccompanied minors, passengers with infants, etc.");

    /**
     * The column <code>dcs.leg.ptm_pax_disembarking_prod_d</code>. Indicates if PAX Transfer Message is produced or not.
     */
    public final TableField<LegRecord, String> PTM_PAX_DISEMBARKING_PROD_D = createField("ptm_pax_disembarking_prod_d", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if PAX Transfer Message is produced or not.");

    /**
     * The column <code>dcs.leg.ptm_pax_disembarking_reqd_d</code>. Indicates if PAX Transfer Message (list of PAX transiting through the next downline stations) is required or not.
     */
    public final TableField<LegRecord, String> PTM_PAX_DISEMBARKING_REQD_D = createField("ptm_pax_disembarking_reqd_d", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if PAX Transfer Message (list of PAX transiting through the next downline stations) is required or not.");

    /**
     * The column <code>dcs.leg.replace_destination</code>. Indicates if the original destination is replaced by another one.
     */
    public final TableField<LegRecord, String> REPLACE_DESTINATION = createField("replace_destination", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if the original destination is replaced by another one.");

    /**
     * The column <code>dcs.leg.schd_arrival_date</code>. A flight leg's scheduled local date of arrival into an airport.
     */
    public final TableField<LegRecord, Timestamp> SCHD_ARRIVAL_DATE = createField("schd_arrival_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "A flight leg's scheduled local date of arrival into an airport.");

    /**
     * The column <code>dcs.leg.schd_arrival_time</code>. A flight leg's scheduled local time of arrival into an airport.
     */
    public final TableField<LegRecord, String> SCHD_ARRIVAL_TIME = createField("schd_arrival_time", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "A flight leg's scheduled local time of arrival into an airport.");

    /**
     * The column <code>dcs.leg.schd_departure_time</code>. A flight leg's scheduled local time of departure from an airport.
     */
    public final TableField<LegRecord, String> SCHD_DEPARTURE_TIME = createField("schd_departure_time", org.jooq.impl.SQLDataType.VARCHAR.length(4), this, "A flight leg's scheduled local time of departure from an airport.");

    /**
     * The column <code>dcs.leg.schd_leg_departure_date</code>. A flight leg's scheduled local date of departure from an airport.
     */
    public final TableField<LegRecord, Timestamp> SCHD_LEG_DEPARTURE_DATE = createField("schd_leg_departure_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "A flight leg's scheduled local date of departure from an airport.");

    /**
     * The column <code>dcs.leg.seat_plan_prod_p</code>. Indicates if Seat Plan is produced or not.
     */
    public final TableField<LegRecord, String> SEAT_PLAN_PROD_P = createField("seat_plan_prod_p", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Seat Plan is produced or not.");

    /**
     * The column <code>dcs.leg.seat_plan_reqd_p</code>. Indicates if Seat Plan is required or not.
     */
    public final TableField<LegRecord, String> SEAT_PLAN_REQD_P = createField("seat_plan_reqd_p", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Seat Plan is required or not.");

    /**
     * The column <code>dcs.leg.seats_2_suit_flight</code>. With "Seats to Suit" you can select an experience that suits your needs and preferences, like Seat, Seat+Bag, The Works, Works Deluxe, Premium Economy, Business Premier.
     */
    public final TableField<LegRecord, String> SEATS_2_SUIT_FLIGHT = createField("seats_2_suit_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "With \"Seats to Suit\" you can select an experience that suits your needs and preferences, like Seat, Seat+Bag, The Works, Works Deluxe, Premium Economy, Business Premier.");

    /**
     * The column <code>dcs.leg.seats_occupd_signal_reqd_o</code>. Indicates if Seats Occupied Message (to inform the next downline station of seats occupied by transit PAX or seats protected for downline boarding) is required or not.
     */
    public final TableField<LegRecord, String> SEATS_OCCUPD_SIGNAL_REQD_O = createField("seats_occupd_signal_reqd_o", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Seats Occupied Message (to inform the next downline station of seats occupied by transit PAX or seats protected for downline boarding) is required or not.");

    /**
     * The column <code>dcs.leg.seats_occupd_signl_prod_o</code>. Indicates if Seats Occupied Message is produced or not.
     */
    public final TableField<LegRecord, String> SEATS_OCCUPD_SIGNL_PROD_O = createField("seats_occupd_signl_prod_o", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Seats Occupied Message is produced or not.");

    /**
     * The column <code>dcs.leg.secure_flight_arrival_reqd</code>. US PAX pre-screening program
     */
    public final TableField<LegRecord, String> SECURE_FLIGHT_ARRIVAL_REQD = createField("secure_flight_arrival_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "US PAX pre-screening program");

    /**
     * The column <code>dcs.leg.secure_flight_departure_reqd</code>. US PAX pre-screening program
     */
    public final TableField<LegRecord, String> SECURE_FLIGHT_DEPARTURE_REQD = createField("secure_flight_departure_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "US PAX pre-screening program");

    /**
     * The column <code>dcs.leg.secure_flight_overfly_reqd</code>. US PAX pre-screening program
     */
    public final TableField<LegRecord, String> SECURE_FLIGHT_OVERFLY_REQD = createField("secure_flight_overfly_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "US PAX pre-screening program");

    /**
     * The column <code>dcs.leg.skycouch_flight</code>. The Skycouch is a row of three Economy seats that together create a flexible space for whatever you want it to be - an area to relax and stretch out in, or for the kids to use as a play area. It?s like having your very own couch on the plane.
     */
    public final TableField<LegRecord, String> SKYCOUCH_FLIGHT = createField("skycouch_flight", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "The Skycouch is a row of three Economy seats that together create a flexible space for whatever you want it to be - an area to relax and stretch out in, or for the kids to use as a play area. It?s like having your very own couch on the plane.");

    /**
     * The column <code>dcs.leg.smallpox_certificate_reqd</code>. Indicates (to check-in staff) that PAX require Smallpox certificate for the destination.
     */
    public final TableField<LegRecord, String> SMALLPOX_CERTIFICATE_REQD = createField("smallpox_certificate_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates (to check-in staff) that PAX require Smallpox certificate for the destination.");

    /**
     * The column <code>dcs.leg.tail_number</code>. The number that uniquely identifies the aircaft within the territory that it is registered in
     */
    public final TableField<LegRecord, String> TAIL_NUMBER = createField("tail_number", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "The number that uniquely identifies the aircaft within the territory that it is registered in");

    /**
     * The column <code>dcs.leg.through_check_in_indicator</code>. Indicates if Through Check-In function is active or not at this station.
     */
    public final TableField<LegRecord, String> THROUGH_CHECK_IN_INDICATOR = createField("through_check_in_indicator", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Through Check-In function is active or not at this station.");

    /**
     * The column <code>dcs.leg.ticket_numbers_reqd</code>. Does this flight require ticket numbers during Flight Interruption Manifest (FIM) process.
     */
    public final TableField<LegRecord, String> TICKET_NUMBERS_REQD = createField("ticket_numbers_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Does this flight require ticket numbers during Flight Interruption Manifest (FIM) process.");

    /**
     * The column <code>dcs.leg.tp_inhibited_at_this_station</code>. Indicates if Tranfer PAX (TP) function is disabled at this station or not.
     */
    public final TableField<LegRecord, String> TP_INHIBITED_AT_THIS_STATION = createField("tp_inhibited_at_this_station", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Tranfer PAX (TP) function is disabled at this station or not.");

    /**
     * The column <code>dcs.leg.visa_reqd</code>. Indicates (to check-in staff) that PAX require Visa for the destination.
     */
    public final TableField<LegRecord, String> VISA_REQD = createField("visa_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates (to check-in staff) that PAX require Visa for the destination.");

    /**
     * The column <code>dcs.leg.yellow_fever_cert_reqd</code>. Indicates (to check-in staff) that PAX require Yellow Fever certificate for the destination.
     */
    public final TableField<LegRecord, String> YELLOW_FEVER_CERT_REQD = createField("yellow_fever_cert_reqd", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates (to check-in staff) that PAX require Yellow Fever certificate for the destination.");

    /**
     * The column <code>dcs.leg.dead_bag_verifctn_station</code>. Indicates if Dead Bag Verification function (to verify KIOSK printed bag tags at bag drops) is active or not at this station.
     */
    public final TableField<LegRecord, String> DEAD_BAG_VERIFCTN_STATION = createField("dead_bag_verifctn_station", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Dead Bag Verification function (to verify KIOSK printed bag tags at bag drops) is active or not at this station.");

    /**
     * The column <code>dcs.leg.boardng_inhbtr_actv_ths_statn</code>. Indicates if Boarding Inhibitor function is active or not at this station.
     */
    public final TableField<LegRecord, String> BOARDNG_INHBTR_ACTV_THS_STATN = createField("boardng_inhbtr_actv_ths_statn", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Boarding Inhibitor function is active or not at this station.");

    /**
     * The column <code>dcs.leg.traffic_restrctns_in_force</code>. Indicates if Traffic Restrictions (where an airline can not carry passenger between two cities) are in force for this leg or not.
     */
    public final TableField<LegRecord, String> TRAFFIC_RESTRCTNS_IN_FORCE = createField("traffic_restrctns_in_force", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Indicates if Traffic Restrictions (where an airline can not carry passenger between two cities) are in force for this leg or not.");

    /**
     * Create a <code>dcs.leg</code> table reference
     */
    public Leg() {
        this("leg", null);
    }

    /**
     * Create an aliased <code>dcs.leg</code> table reference
     */
    public Leg(String alias) {
        this(alias, LEG);
    }

    private Leg(String alias, Table<LegRecord> aliased) {
        this(alias, aliased, null);
    }

    private Leg(String alias, Table<LegRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dcs.DCS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LegRecord> getPrimaryKey() {
        return Keys.PK_FLIGHT_LEG_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LegRecord>> getKeys() {
        return Arrays.<UniqueKey<LegRecord>>asList(Keys.PK_FLIGHT_LEG_ID, Keys.BK_FLIGHT_LEG_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LegRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LegRecord, ?>>asList(Keys.LEG__FK_LEG_FLIGHT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Leg as(String alias) {
        return new Leg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Leg rename(String name) {
        return new Leg(name, null);
    }
}
